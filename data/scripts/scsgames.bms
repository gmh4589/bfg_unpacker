# SCS Software games (script 0.2.3a)
#   Euro Truck Simulator 2
#   Scania
#   any other game developed by SCS Software, both ZIP and SCS# formats supported
# script for QuickBMS http://quickbms.aluigi.org

quickbmsver "0.8.1"
set ZIP_SIGN binary "PK\x03\x04"

get EXT extension
getdstring SIGN 4
if SIGN == "SCS#"

    comtype zlib_noerror    # zlib is not enough with some archives
    get DUMMY long
    get DUMMY long
    get FILES long
    get OFFSET long
    goto OFFSET
    for i = 0 < FILES
        getdstring DUMMY 8
        get OFFSET long
        get DUMMY long  # OFFSET64?
        get TYPE long
        get CRC long
        get SIZE long
        get ZSIZE long
        if ZSIZE == SIZE
            log "" OFFSET SIZE
        else
            clog "" OFFSET ZSIZE SIZE
        endif
    next i

elif SIGN == ZIP_SIGN

    ComType deflate_noerror
    goto 0
    get zip_filesize asize
    for offset = 0 < zip_filesize
        getdstring sign 4
        if sign == ZIP_SIGN
            get ver             short
            get flag            short
            get method          short
            get modtime         short
            get moddate         short
            get crc             long
            get comp_size       long
            get uncomp_size     long
            get name_len        short
            get extra_len       short
            getdstring name     name_len
            getdstring extra    extra_len
            savepos offset

            # now they use method 0 for both compressed and non-compressed files
            #if method == 8
                CLog name offset comp_size uncomp_size
            #else
            #    Log name offset uncomp_size
            #endif

            math offset += comp_size
            goto offset
        else
            cleanexit
        endif
    next

elif SIGN == "AEM!"

    ComType deflate
    goto -1
    findloc OFFSET binary "PK\x05\x06" 0 "" 0
    if OFFSET == ""
        print "Error: Central directory file header not found"
        cleanexit
    endif
    goto OFFSET
    idstring "PK\x05\x06"
    get disk_num        short
    get disk_start      short
    get central_entries short
    get central_entries short
    get central_size    long
    get central_offset  long
    get comm_len        short
    getdstring comment  comm_len

    for i = 0 < central_entries
        goto central_offset
        idstring "PK\x01\x02"
        get ver_made        short
        get ver_need        short
        get flag            short
        get method          short
        get modtime         short
        get moddate         short
        get crc             long
        get comp_size       long
        get uncomp_size     long
        get name_len        short
        get extra_len       short
        get comm_len        short
        get disknum         short
        get int_attr        short
        get ext_attr        long
        get rel_offset      long
        getdstring name     name_len
        getdstring extra    extra_len
        getdstring comment  comm_len
        savepos central_offset

        goto rel_offset
        idstring "AEM!"
        getdstring SKIP 0x10    # zero, 'a' and 'A's
        get ZERO long
        get DUMMY short         # 0xac66
        if ext_attr & 0x10      # folders have ext_attr 0x10 and files 0x20, otherwise we need to check comp_size
        else
            get name_len        short
            get extra_len       short
            getdstring name     name_len
            getdstring extra    extra_len
            savepos offset

            if method == 0
                Log name offset uncomp_size
            else
                # method 8
                CLog name offset comp_size uncomp_size
            endif
        endif
    next i

elif EXT == "def"

    set MEMORY_FILE10 string "
        void crypt_3nK(unsigned char key, unsigned char *data, int size) {
            for(int i = 0; i < size; i++) {
                data[i] ^= (((key << 2) ^ (key ^ 0xff)) << 3) ^ key;
                key++;
            }
        }
    "

    goto 0
    idstring "3nK"
    get VER short   # 1
    get KEY byte
    savepos OFFSET
    get SIZE asize
    math SIZE - OFFSET
    encryption calldll "MEMORY_FILE10 crypt_3nK tcc RET KEY #INPUT# #INPUT_SIZE#"

    get NAME basename
    get EXT extension
    string NAME + "_crypt."
    string NAME + EXT
    log NAME OFFSET SIZE

else

    print "Error: unknown signature %SIGN%"
    cleanexit

endif
