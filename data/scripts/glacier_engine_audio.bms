# extracts the WHD/WAV pairs from the Glacier engine
# needs the streams.wav in the same folder as the whd/wav pair(s)
# tested with Hitman 2: Silent Assassin (Xbox, PS2)
# (c) 2013-08-30 by AlphaTwentyThree of XeNTaX
# script for QuickBMS http://quickbms.aluigi.org

open FDDE WHD 0
open FDDE WAV 1
open FDSE "streams.wav" 2 EXISTS
if EXISTS == 0
   open FDSE "STREAMS.WAV" 2 EXISTS
endif
get TOCSIZE long 0
get WHDSIZE long 0
if WHDSIZE == 0x18
   cleanexit
endif
get UNK longlong 0
do
   get NAME string 0
   savepos MYOFF 0
   math MYOFF x= 4
   goto MYOFF 0
   get UNK long 0
   get UNK long 0
   get CODEC threebyte 0
   get FILE byte 0
   get FREQ long 0
   get BITS long 0
   get UNK long 0
   get SIZE long 0
   get CH long 0
   get OFFSET long 0
   get UNK long 0
   get INTERLEAVE long 0
   get UNK long 0
   savepos MYOFF 0
   if FILE == 0
      if CODEC == 0x69
         string NAME += ".lwav"
         callfunction XADP 1
      elif CODEC == 1
         set BLOCKALIGN 4
         callfunction PCM_1 1
      elif CODEC == 0x12
         string NAME += ".genh"
         set CODEC 9
         if CH == 1
            set INTERLEAVE 0
         endif
         callfunction GENH 1
      else
         print "Error: unknown codec. Aborting..."
         cleanexit
      endif
   elif FILE == 0x80
      if EXISTS == 1
         set BLOCKALIGN 4
         callfunction PCM_2 1
      endif
   endif
while MYOFF < TOCSIZE

startfunction XADP
   set MEMORY_FILE binary "\x52\x49\x46\x46\x18\x51\xa3\x0\x57\x41\x56\x45\x66\x6d\x74\x20\x14\x0\x0\x0\x69\x0\x2\x0\x44\xac\x0\x0\xcc\xc1\x0\x0\x48\x0\x4\x0\x2\x0\x40\x0\x64\x61\x74\x61\xf0\x50\xa3\x0"
   set RIFFSIZE SIZE
   math RIFFSIZE += 0x28
   putVarChr MEMORY_FILE 0x04 RIFFSIZE long
   putVarChr MEMORY_FILE 0x16 CH byte
   putVarChr MEMORY_FILE 0x18 FREQ long
   set VAR1 0x3073
   math VAR1 *= CH
   if FREQ == 48000
      math VAR1 *= 44100
   else
      math VAR1 *= FREQ
   endif
   math VAR1 /= 22050
   putVarChr MEMORY_FILE 0x1c VAR1 long   
   set VAR2 0x24
   math VAR2 *= CH
   putVarChr MEMORY_FILE 0x20 VAR2 short
   putVarChr MEMORY_FILE 0x2c SIZE long
   append
   log MEMORY_FILE OFFSET SIZE 1
   append
   if NAME == ""
      get NAME basename
      string NAME += ".lwav"
   endif
   get SIZE asize MEMORY_FILE
   log NAME 0 SIZE MEMORY_FILE
endfunction

startfunction PCM_1
   set PRE SIZE
   math PRE += 0x2c
   putVarChr MEMORY_FILE PRE 0
   log MEMORY_FILE 0 0
   set MEMORY_FILE binary "\x52\x49\x46\x46\x20\xC0\xB1\x00\x57\x41\x56\x45\x66\x6D\x74\x20\x10\x00\x00\x00\x01\x00\x02\x00\x44\xAC\x00\x00\x10\xB1\x02\x00\x04\x00\x10\x00\x64\x61\x74\x61\xFC\xBF\xB1\x00"
   append
   log MEMORY_FILE OFFSET SIZE 1
   append
   set RIFFSIZE SIZE
   math RIFFSIZE += 36
   set AVGBYTES FREQ
   if CODEC != 2
      math AVGBYTES *= BLOCKALIGN
   endif
   
   putvarchr MEMORY_FILE 0x04 RIFFSIZE long
   putvarchr MEMORY_FILE 0x14 CODEC short
   putvarchr MEMORY_FILE 0x16 CH short
   putvarchr MEMORY_FILE 0x18 FREQ short
   putvarchr MEMORY_FILE 0x1c AVGBYTES long
   putvarchr MEMORY_FILE 0x20 BLOCKALIGN short
   putvarchr MEMORY_FILE 0x22 BITS short
   putvarchr MEMORY_FILE 0x28 SIZE long
   if NAME == ""
      get NAME basename
      string NAME += ".wav"
   endif
   get SIZE asize MEMORY_FILE
   log NAME 0 SIZE MEMORY_FILE
endfunction

startfunction PCM_2
   set PRE SIZE
   math PRE += 0x2c
   putVarChr MEMORY_FILE PRE 0
   log MEMORY_FILE 0 0
   set MEMORY_FILE binary "\x52\x49\x46\x46\x20\xC0\xB1\x00\x57\x41\x56\x45\x66\x6D\x74\x20\x10\x00\x00\x00\x01\x00\x02\x00\x44\xAC\x00\x00\x10\xB1\x02\x00\x04\x00\x10\x00\x64\x61\x74\x61\xFC\xBF\xB1\x00"
   append
   log MEMORY_FILE OFFSET SIZE 2
   append
   set RIFFSIZE SIZE
   math RIFFSIZE += 36
   set AVGBYTES FREQ
   if CODEC != 2
      math AVGBYTES *= BLOCKALIGN
   endif
   
   putvarchr MEMORY_FILE 0x04 RIFFSIZE long
   putvarchr MEMORY_FILE 0x14 CODEC short
   putvarchr MEMORY_FILE 0x16 CH short
   putvarchr MEMORY_FILE 0x18 FREQ short
   putvarchr MEMORY_FILE 0x1c AVGBYTES long
   putvarchr MEMORY_FILE 0x20 BLOCKALIGN short
   putvarchr MEMORY_FILE 0x22 BITS short
   putvarchr MEMORY_FILE 0x28 SIZE long
   if NAME == ""
      get NAME basename
      string NAME += ".wav"
   endif
   get SIZE asize MEMORY_FILE
   log NAME 0 SIZE MEMORY_FILE
endfunction

startfunction GENH
   set SAMPLES SIZE
   math SAMPLES *= 8
   math SAMPLES /= BITS

   set FSIZE SIZE
   math FSIZE += 0x1000
   putVarChr MEMORY_FILE FSIZE 0
   log MEMORY_FILE 0 0
   putVarChr MEMORY_FILE 0 0x484e4547 long
   putVarChr MEMORY_FILE 0x4 CH long
   putVarChr MEMORY_FILE 0x8 INTERLEAVE long
   putVarChr MEMORY_FILE 0xc FREQ long
   putVarChr MEMORY_FILE 0x10 0xffffffff long
   putVarChr MEMORY_FILE 0x14 SAMPLES long
   putVarChr MEMORY_FILE 0x18 CODEC long
   putVarChr MEMORY_FILE 0x1c 0x1000 long # offset; == stream start if no header
   putVarChr MEMORY_FILE 0x20 0x1000 long
   putVarChr MEMORY_FILE 0x300 FSIZE long
   putVarChr MEMORY_FILE 0x304 0x32304756 long
   putVarChr MEMORY_FILE 0xfff 0 byte
   math FSIZE -= 0x1000
   append
   log MEMORY_FILE OFFSET FSIZE 1
   append
   get SIZE asize MEMORY_FILE
   log NAME 0 SIZE MEMORY_FILE
endfunction