# 1C SFS archives (script 0.2a)
#   IL-2 Sturmovik: Forgotten Battles / Pacific Fighters / 1946
#   Theatre of War
#   Theatre of War 2: Africa 1943 / Kursk 1943
#   ...possibly others...
#
#   IMPORTANT NOTES
#   - the archive doesn't contain the names of the files but only their CRC!
#   - the files with attributes AND 0x6 (like 0x26) are saved "as is", I don't
#     have idea if they must be decompressed or decrypted in some way, no info
#     the above problem was visible also with various files of IL-2 1946, no idea why
#
# script for QuickBMS http://quickbms.aluigi.org

callfunction get_sfs_name 1
set IL2_MODE long 0
set CRYPT_MODE long 0

log MEMORY_FILE2 0 0
log MEMORY_FILE 0 0x100
idstring MEMORY_FILE "SFS\0"
get VERSION long MEMORY_FILE
if VERSION <= 0xc9
    get CRC long MEMORY_FILE
    get FILES long MEMORY_FILE
    get INFO_OFF long MEMORY_FILE
    get INFO2_OFF long MEMORY_FILE
    get DATA_OFF long MEMORY_FILE
    get DATA_SIZE long MEMORY_FILE
elif VERSION == 0xca    # only IL-2 1946 uses it at the moment
    set IL2_MODE long 1
    set CRYPT_MODE long 1
    math SFS_CHECKSUM_SIZE = SFS_NAME_LEN
    put SFS_NAME string MEMORY_FILE2
    callfunction sfs_checksum 1
    set DECRYPT_SIZE long 0x18
    set sfs_decrypt_div long 3
    log MEMORY_FILE2 8 DECRYPT_SIZE MEMORY_FILE
    callfunction sfs_decrypt 1
    goto 0 MEMORY_FILE2
    get CRC long MEMORY_FILE2
    get FILES long MEMORY_FILE2
    get INFO_OFF long MEMORY_FILE2
    get INFO2_OFF long MEMORY_FILE2
    get DATA_OFF long MEMORY_FILE2
    get DATA_SIZE long MEMORY_FILE2
else
    print "Error: this version of the file (%VERSION%) is not supported yet"
    cleanexit
endif
if INFO_OFF != 0x100
    print "Alert: the information offset is not 0x100 (%INFO_OFF%/%VERSION%), the extraction could fail"
endif

# lame check to know the right parameters of the encryption... ufff
set EVER2_IS_OK long 0
set CHECK long 0
do
    math CHECK += 1
    if CHECK == 1
        print "check Theatre of War encryption"
        set IL2_MODE long 0
        set CRYPT_MODE long 0
    elif CHECK == 2
        print "check Theatre of War demo encryption"
        set IL2_MODE long 0
        set CRYPT_MODE long 1
    elif CHECK == 3
        print "check IL-2 encryption"
        set IL2_MODE long 1
        set CRYPT_MODE long 1
    elif CHECK == 4
        print "check IL-2 dunno encryption"
        set IL2_MODE long 1
        set CRYPT_MODE long 0
    else
        print "Error: unsupported file type, contact me"
        cleanexit
    endif

    if IL2_MODE == 0        # Theatre of War
        set sfs_decrypt_div1 long 2
        set sfs_decrypt_div2 long 7
    else                    # IL-2
        set sfs_decrypt_div1 long 5
        set sfs_decrypt_div2 long 3
    endif

    if VERSION <= 0xc9
        set SFS_CHECKSUM_SIZE long 0x100
        log MEMORY_FILE2 0 0x100
        callfunction sfs_checksum 1
    endif

    log MEMORY_FILE2 INFO_OFF 32
    set DECRYPT_SIZE long 32
    if CRYPT_MODE == 0
        set sfs_decrypt_div long sfs_decrypt_div1
    else
        set sfs_decrypt_div long sfs_decrypt_div2
    endif
    callfunction sfs_decrypt 1

    get NAME_CRC long MEMORY_FILE2
    get FILE_CRC long MEMORY_FILE2
    get DUMMY long MEMORY_FILE2
    get OFFSET long MEMORY_FILE2
    get SIZE long MEMORY_FILE2
    get EVER2 long MEMORY_FILE2
    math EVER2 a= EVER2 # remove the possible negative sign
    if EVER2 <= 2
        set EVER2_IS_OK long 1
    endif
while EVER2_IS_OK == 0

# table with the informations about the files
math INFO_SIZE = FILES
math INFO_SIZE *= 32
log MEMORY_FILE2 INFO_OFF INFO_SIZE
set DECRYPT_SIZE long INFO_SIZE
if CRYPT_MODE == 0
    set sfs_decrypt_div long sfs_decrypt_div1
else
    set sfs_decrypt_div long sfs_decrypt_div2
endif
callfunction sfs_decrypt 1
log MEMORY_FILE 0 INFO_SIZE MEMORY_FILE2    # copy it on MEMORY_FILE

# table with the informations about the chunks
math INFO2_SIZE = DATA_OFF
math INFO2_SIZE -= INFO2_OFF
log MEMORY_FILE2 INFO2_OFF INFO2_SIZE
set DECRYPT_SIZE long INFO2_SIZE
if CRYPT_MODE == 0
    set sfs_decrypt_div long sfs_decrypt_div2
else
    set sfs_decrypt_div long sfs_decrypt_div1
endif
callfunction sfs_decrypt 1

#log xMEMORY_FILE  0 INFO_SIZE MEMORY_FILE      #debug
#log xMEMORY_FILE2 0 INFO2_SIZE MEMORY_FILE2    #debug
#cleanexit                                      #debug
set MEMTTMP_SIZE long 800000000 # use memory file below this size
print "please wait the unpacking of the filesystem on the disk/memory"

# unpack the chunks
math CHUNKS = INFO2_SIZE
math CHUNKS /= 4
math CHUNKS -= 1    # the last one is EOF
if DATA_SIZE < MEMTTMP_SIZE
    putvarchr MEMORY_FILE3 DATA_SIZE 0   # yes, you need enough memory
    log MEMORY_FILE3 0 0
else
    log TEMPORARY_FILE 0 0
endif
append
get OFFSET long MEMORY_FILE2
for i = 0 < CHUNKS
    get NEXT_OFFSET long MEMORY_FILE2
    math SIZE = NEXT_OFFSET
    math SIZE -= OFFSET
    if SIZE == 32768
            if DATA_SIZE < MEMTTMP_SIZE
                log MEMORY_FILE3 OFFSET SIZE
            else
                log TEMPORARY_FILE OFFSET SIZE
            endif
    else
        goto OFFSET
        get TYPE byte
        math SIZE -= 1
        math OFFSET += 1
        if TYPE == 1
            comtype lzss "12 4 2 2 0"   # lzss with 0x00 initializer (PUYO_LZ01 is ok too)
            if DATA_SIZE < MEMTTMP_SIZE
                clog MEMORY_FILE3 OFFSET SIZE 32768
            else
                clog TEMPORARY_FILE OFFSET SIZE 32768
            endif
        else
            comtype deflate
            get METHOD short
            math SIZE -= 2
            math OFFSET += 2
            if METHOD == 0
                if DATA_SIZE < MEMTTMP_SIZE
                    log MEMORY_FILE3 OFFSET SIZE
                else
                    log TEMPORARY_FILE OFFSET SIZE
                endif
            elif METHOD == 8
                if DATA_SIZE < MEMTTMP_SIZE
                    clog MEMORY_FILE3 OFFSET SIZE 32768
                else
                    clog TEMPORARY_FILE OFFSET SIZE 32768
                endif
            else
                print "Error: unknown method %METHOD% at offset %OFFSET%"
                cleanexit
            endif
        endif
    endif
    math OFFSET = NEXT_OFFSET
next i
append

if DATA_SIZE < MEMTTMP_SIZE
    # do nothing
else
    open "." TEMPORARY_FILE 1
endif

# extract the files
for i = 0 < FILES
    get NAME_CRC1 long MEMORY_FILE
    get NAME_CRC2 long MEMORY_FILE
    callfunction lame_namecrc 1
    get DUMMY1 long MEMORY_FILE
    get OFFSET long MEMORY_FILE
    get SIZE long MEMORY_FILE
    get EVER2 long MEMORY_FILE
    get ATTRIBUTES long MEMORY_FILE
    get DUMMY2 long MEMORY_FILE
    #if ATTRIBUTES & 6
    #   not supported at the moment
    #endif
    #else
        if DATA_SIZE < MEMTTMP_SIZE
            log NAME_CRC OFFSET SIZE MEMORY_FILE3
        else
            log NAME_CRC OFFSET SIZE 1
        endif
    #endif
next i

# various functions

startfunction lame_namecrc
    set NAME_CRC string ""
    #string NAME_CRC += NAME_CRC2
    #string NAME_CRC += NAME_CRC1
    #string NAME_CRC += ".dat"
endfunction

startfunction sfs_checksum
    if SFS_CHECKSUM_SIZE <= 0
        print "Error: SFS_CHECKSUM_SIZE in script"
        cleanexit
    endif
    set CRC_TABLE1 binary "\x00\x00\x00\x00\x5e\x8d\x78\x23\xbc\x1a\xf1\x46\xe2\x97\x89\x65\x78\x35\xe2\x0d\x26\xb8\x9a\x2e\xc4\x2f\x13\x4b\x9a\xa2\x6b\x68\xae\xe7\xbc\x38\xf0\x6a\xc4\x1b\x12\xfd\x4d\x7e\x4c\x70\x35\x5d\xd6\xd2\x5e\x35\x88\x5f\x26\x16\x6a\xc8\xaf\x73\x34\x45\xd7\x50\x5c\xcf\x79\x71\x02\x42\x01\x52\xe0\xd5\x88\x37\xbe\x58\xf0\x14\x24\xfa\x9b\x7c\x7a\x77\xe3\x5f\x98\xe0\x6a\x3a\xc6\x6d\x12\x19\xf2\x28\xc5\x49\xac\xa5\xbd\x6a\x4e\x32\x34\x0f\x10\xbf\x4c\x2c\x8a\x1d\x27\x44\xd4\x90\x5f\x67\x36\x07\xd6\x02\x68\x8a\xae\x21\xb8\x9e\xf3\x62\xe6\x13\x8b\x41\x04\x84\x02\x24\x5a\x09\x7a\x07\xc0\xab\x11\x6f\x9e\x26\x69\x4c\x7c\xb1\xe0\x29\x22\x3c\x98\x0a\x16\x79\x4f\x5a\x48\xf4\x37\x79\xaa\x63\xbe\x1c\xf4\xee\xc6\x3f\x6e\x4c\xad\x57\x30\xc1\xd5\x74\xd2\x56\x5c\x11\x8c\xdb\x24\x32\xe4\x51\x8a\x13\xba\xdc\xf2\x30\x58\x4b\x7b\x55\x06\xc6\x03\x76\x9c\x64\x68\x1e\xc2\xe9\x10\x3d\x20\x7e\x99\x58\x7e\xf3\xe1\x7b\x4a\xb6\x36\x2b\x14\x3b\x4e\x08\xf6\xac\xc7\x6d\xa8\x21\xbf\x4e\x32\x83\xd4\x26\x6c\x0e\xac\x05\x8e\x99\x25\x60\xd0\x14\x5d\x43\x2e\xb0\x9f\x66\x70\x3d\xe7\x45\x92\xaa\x6e\x20\xcc\x27\x16\x03\x56\x85\x7d\x6b\x08\x08\x05\x48\xea\x9f\x8c\x2d\xb4\x12\xf4\x0e\x80\x57\x23\x5e\xde\xda\x5b\x7d\x3c\x4d\xd2\x18\x62\xc0\xaa\x3b\xf8\x62\xc1\x53\xa6\xef\xb9\x70\x44\x78\x30\x15\x1a\xf5\x48\x36\x72\x7f\xe6\x17\x2c\xf2\x9e\x34\xce\x65\x17\x51\x90\xe8\x6f\x72\x0a\x4a\x04\x1a\x54\xc7\x7c\x39\xb6\x50\xf5\x5c\xe8\xdd\x8d\x7f\xdc\x98\x5a\x2f\x82\x15\x22\x0c\x60\x82\xab\x69\x3e\x0f\xd3\x4a\xa4\xad\xb8\x22\xfa\x20\xc0\x01\x18\xb7\x49\x64\x46\x3a\x31\x47\x96\x2e\x6c\x04\xc8\xa3\x14\x27\x2a\x34\x9d\x42\x74\xb9\xe5\x61\xee\x1b\x8e\x09\xb0\x96\xf6\x2a\x52\x01\x7f\x4f\x0c\x8c\x07\x6c\x38\xc9\xd0\x3c\x66\x44\xa8\x1f\x84\xd3\x21\x7a\xda\x5e\x59\x59\x40\xfc\x32\x31\x1e\x71\x4a\x12\xfc\xe6\xc3\x77\xa2\x6b\xbb\x54\xca\xe1\x15\x75\x94\x6c\x6d\x56\x76\xfb\xe4\x33\x28\x76\x9c\x10\xb2\xd4\xf7\x78\xec\x59\x8f\x5b\x0e\xce\x06\x3e\x50\x43\x7e\x1d\x64\x06\xa9\x4d\x3a\x8b\xd1\x6e\xd8\x1c\x58\x0b\x86\x91\x20\x28\x1c\x33\x4b\x40\x42\xbe\x33\x63\xa0\x29\xba\x06\xfe\xa4\xc2\x25\x02\xed\x47\x6e\x5c\x60\x3f\x4d\xbe\xf7\xb6\x28\xe0\x7a\xce\x0b\x7a\xd8\xa5\x63\x24\x55\xdd\x40\xc6\xc2\x54\x25\x98\x4f\x2c\x06\xac\x0a\xfb\x56\xf2\x87\x83\x75\x10\x10\x0a\x10\x4e\x9d\x72\x33\xd4\x3f\x19\x5b\x8a\xb2\x61\x78\x68\x25\xe8\x1d\x36\xa8\x90\x3e\x5e\x22\x3e\x1f\x00\xaf\x46\x3c\xe2\x38\xcf\x59\xbc\xb5\xb7\x7a\x26\x17\xdc\x12\x78\x9a\xa4\x31\x9a\x0d\x2d\x54\xc4\x80\x55\x77\xf0\xc5\x82\x27\xae\x48\xfa\x04\x4c\xdf\x73\x61\x12\x52\x0b\x42\x88\xf0\x60\x2a\xd6\x7d\x18\x09\x34\xea\x91\x6c\x6a\x67\xe9\x4f\xba\x73\xb4\x0c\xe4\xfe\xcc\x2f\x06\x69\x45\x4a\x58\xe4\x3d\x69\xc2\x46\x56\x01\x9c\xcb\x2e\x22\x7e\x5c\xa7\x47\x20\xd1\xdf\x64\x14\x94\x08\x34\x4a\x19\x70\x17\xa8\x8e\xf9\x72\xf6\x03\x81\x51\x6c\xa1\xea\x39\x32\x2c\x92\x1a\xd0\xbb\x1b\x7f\x8e\x36\x63\x5c\xe6\xbc\xcd\x7d\xb8\x31\xb5\x5e\x5a\xa6\x3c\x3b\x04\x2b\x44\x18\x9e\x89\x2f\x70\xc0\x04\x57\x53\x22\x93\xde\x36\x7c\x1e\xa6\x15\x48\x5b\x71\x45\x16\xd6\x09\x66\xf4\x41\x80\x03\xaa\xcc\xf8\x20\x30\x6e\x93\x48\x6e\xe3\xeb\x6b\x8c\x74\x62\x0e\xd2\xf9\x1a\x2d\x2c\x5d\xd8\x08\x72\xd0\xa0\x2b\x90\x47\x29\x4e\xce\xca\x51\x6d\x54\x68\x3a\x05\x0a\xe5\x42\x26\xe8\x72\xcb\x43\xb6\xff\xb3\x60\x82\xba\x64\x30\xdc\x37\x1c\x13\x3e\xa0\x95\x76\x60\x2d\xed\x55\xfa\x8f\x86\x3d\xa4\x02\xfe\x1e\x46\x95\x77\x7b\x18\x18\x0f\x58\x70\x92\xa1\x79\x2e\x1f\xd9\x5a\xcc\x88\x50\x3f\x92\x05\x28\x1c\x08\xa7\x43\x74\x56\x2a\x3b\x57\xb4\xbd\xb2\x32\xea\x30\xca\x11\xde\x75\x1d\x41\x80\xf8\x65\x62\x62\x6f\xec\x07\x3c\xe2\x94\x24\xa6\x40\xff\x4c\xf8\xcd\x87\x6f\x1a\x5a\x0e\x0a\x44\xd7\x76\x29\x94\xc3\x2b\x6a\xca\x4e\x53\x49\x28\xd9\xda\x2c\x76\x54\xa2\x0f\xec\xf6\xc9\x67\xb2\x7b\xb1\x44\x50\xec\x38\x21\x0e\x61\x40\x02\x3a\x24\x97\x52\x64\xa9\xef\x71\x86\x3e\x66\x14\xd8\xb3\x1e\x37\x42\x11\x75\x5f\x1c\x9c\x0d\x7c\xfe\x0b\x84\x19\xa0\x86\xfc\x3a\xc8\x0c\x52\x1b\x96\x81\x2a\x38\x74\x16\xa3\x5d\x2a\x9b\xdb\x7e\xb0\x39\xb0\x16\xee\xb4\xc8\x35\x0c\x23\x41\x50\x52\xae\x39\x73\x66\xeb\xee\x23\x38\x66\x96\x00\xda\xf1\x1f\x65\x84\x7c\x67\x46\x1e\xde\x0c\x2e\x40\x53\x74\x0d\xa2\xc4\xfd\x68\xfc\x49\x85\x4b"
    set CRC_TABLE2 binary "\x00\x00\x00\x00\x2e\x18\x34\x14\x72\x28\x5c\x3c\x5c\x30\x68\x28\xca\x48\x8c\x6c\xe4\x50\xb8\x78\xb8\x60\xd0\x50\x96\x78\xe4\x44\xba\x89\x2c\x4d\x94\x91\x18\x59\xc8\xa1\x70\x71\xe6\xb9\x44\x65\x70\xc1\xa0\x21\x5e\xd9\x94\x35\x02\xe9\xfc\x1d\x2c\xf1\xc8\x09\x74\x13\x59\x1a\x5a\x0b\x6d\x0e\x06\x3b\x05\x26\x28\x23\x31\x32\xbe\x5b\xd5\x76\x90\x43\xe1\x62\xcc\x73\x89\x4a\xe2\x6b\xbd\x5e\xce\x9a\x75\x57\xe0\x82\x41\x43\xbc\xb2\x29\x6b\x92\xaa\x1d\x7f\x04\xd2\xf9\x3b\x2a\xca\xcd\x2f\x76\xfa\xa5\x07\x58\xe2\x91\x13\xc6\x3e\x86\x20\xe8\x26\xb2\x34\xb4\x16\xda\x1c\x9a\x0e\xee\x08\x0c\x76\x0a\x4c\x22\x6e\x3e\x58\x7e\x5e\x56\x70\x50\x46\x62\x64\x7c\xb7\xaa\x6d\x52\xaf\x9e\x79\x0e\x9f\xf6\x51\x20\x87\xc2\x45\xb6\xff\x26\x01\x98\xe7\x12\x15\xc4\xd7\x7a\x3d\xea\xcf\x4e\x29\xb2\x2d\xdf\x3a\x9c\x35\xeb\x2e\xc0\x05\x83\x06\xee\x1d\xb7\x12\x78\x65\x53\x56\x56\x7d\x67\x42\x0a\x4d\x0f\x6a\x24\x55\x3b\x7e\x08\xa4\xf3\x77\x26\xbc\xc7\x63\x7a\x8c\xaf\x4b\x54\x94\x9b\x5f\xc2\xec\x7f\x1b\xec\xf4\x4b\x0f\xb0\xc4\x23\x27\x9e\xdc\x17\x33\xa2\x65\x38\x55\x8c\x7d\x0c\x41\xd0\x4d\x64\x69\xfe\x55\x50\x7d\x68\x2d\xb4\x39\x46\x35\x80\x2d\x1a\x05\xe8\x05\x34\x1d\xdc\x11\x18\xec\x14\x18\x36\xf4\x20\x0c\x6a\xc4\x48\x24\x44\xdc\x7c\x30\xd2\xa4\x98\x74\xfc\xbc\xac\x60\xa0\x8c\xc4\x48\x8e\x94\xf0\x5c\xd6\x76\x61\x4f\xf8\x6e\x55\x5b\xa4\x5e\x3d\x73\x8a\x46\x09\x67\x1c\x3e\xed\x23\x32\x26\xd9\x37\x6e\x16\xb1\x1f\x40\x0e\x85\x0b\x6c\xff\x4d\x02\x42\xe7\x79\x16\x1e\xd7\x11\x3e\x30\xcf\x25\x2a\xa6\xb7\xc1\x6e\x88\xaf\xf5\x7a\xd4\x9f\x9d\x52\xfa\x87\xa9\x46\x64\x5b\xbe\x75\x4a\x43\x8a\x61\x16\x73\xe2\x49\x38\x6b\xd6\x5d\xae\x13\x32\x19\x80\x0b\x06\x0d\xdc\x3b\x6e\x25\xf2\x23\x5a\x31\xde\xd2\x92\x38\xf0\xca\xa6\x2c\xac\xfa\xce\x04\x82\xe2\xfa\x10\x14\x9a\x1e\x54\x3a\x82\x2a\x40\x66\xb2\x42\x68\x48\xaa\x76\x7c\x10\x48\xe7\x6f\x3e\x50\xd3\x7b\x62\x60\xbb\x53\x4c\x78\x8f\x47\xda\x00\x6b\x03\xf4\x18\x5f\x17\xa8\x28\x37\x3f\x86\x30\x03\x2b\xaa\xc1\xcb\x22\x84\xd9\xff\x36\xd8\xe9\x97\x1e\xf6\xf1\xa3\x0a\x60\x89\x47\x4e\x4e\x91\x73\x5a\x12\xa1\x1b\x72\x3c\xb9\x2f\x66\x6a\xd3\x44\x3e\x44\xcb\x70\x2a\x18\xfb\x18\x02\x36\xe3\x2c\x16\xa0\x9b\xc8\x52\x8e\x83\xfc\x46\xd2\xb3\x94\x6e\xfc\xab\xa0\x7a\xd0\x5a\x68\x73\xfe\x42\x5c\x67\xa2\x72\x34\x4f\x8c\x6a\x00\x5b\x1a\x12\xe4\x1f\x34\x0a\xd0\x0b\x68\x3a\xb8\x23\x46\x22\x8c\x37\x1e\xc0\x1d\x24\x30\xd8\x29\x30\x6c\xe8\x41\x18\x42\xf0\x75\x0c\xd4\x88\x91\x48\xfa\x90\xa5\x5c\xa6\xa0\xcd\x74\x88\xb8\xf9\x60\xa4\x49\x31\x69\x8a\x51\x05\x7d\xd6\x61\x6d\x55\xf8\x79\x59\x41\x6e\x01\xbd\x05\x40\x19\x89\x11\x1c\x29\xe1\x39\x32\x31\xd5\x2d\xac\xed\xc2\x1e\x82\xf5\xf6\x0a\xde\xc5\x9e\x22\xf0\xdd\xaa\x36\x66\xa5\x4e\x72\x48\xbd\x7a\x66\x14\x8d\x12\x4e\x3a\x95\x26\x5a\x16\x64\xee\x53\x38\x7c\xda\x47\x64\x4c\xb2\x6f\x4a\x54\x86\x7b\xdc\x2c\x62\x3f\xf2\x34\x56\x2b\xae\x04\x3e\x03\x80\x1c\x0a\x17\xd8\xfe\x9b\x04\xf6\xe6\xaf\x10\xaa\xd6\xc7\x38\x84\xce\xf3\x2c\x12\xb6\x17\x68\x3c\xae\x23\x7c\x60\x9e\x4b\x54\x4e\x86\x7f\x40\x62\x77\xb7\x49\x4c\x6f\x83\x5d\x10\x5f\xeb\x75\x3e\x47\xdf\x61\xa8\x3f\x3b\x25\x86\x27\x0f\x31\xda\x17\x67\x19\xf4\x0f\x53\x0d\xc8\xb6\x7c\x6b\xe6\xae\x48\x7f\xba\x9e\x20\x57\x94\x86\x14\x43\x02\xfe\xf0\x07\x2c\xe6\xc4\x13\x70\xd6\xac\x3b\x5e\xce\x98\x2f\x72\x3f\x50\x26\x5c\x27\x64\x32\x00\x17\x0c\x1a\x2e\x0f\x38\x0e\xb8\x77\xdc\x4a\x96\x6f\xe8\x5e\xca\x5f\x80\x76\xe4\x47\xb4\x62\xbc\xa5\x25\x71\x92\xbd\x11\x65\xce\x8d\x79\x4d\xe0\x95\x4d\x59\x76\xed\xa9\x1d\x58\xf5\x9d\x09\x04\xc5\xf5\x21\x2a\xdd\xc1\x35\x06\x2c\x09\x3c\x28\x34\x3d\x28\x74\x04\x55\x00\x5a\x1c\x61\x14\xcc\x64\x85\x50\xe2\x7c\xb1\x44\xbe\x4c\xd9\x6c\x90\x54\xed\x78\x0e\x88\xfa\x4b\x20\x90\xce\x5f\x7c\xa0\xa6\x77\x52\xb8\x92\x63\xc4\xc0\x76\x27\xea\xd8\x42\x33\xb6\xe8\x2a\x1b\x98\xf0\x1e\x0f\xb4\x01\xd6\x06\x9a\x19\xe2\x12\xc6\x29\x8a\x3a\xe8\x31\xbe\x2e\x7e\x49\x5a\x6a\x50\x51\x6e\x7e\x0c\x61\x06\x56\x22\x79\x32\x42\x7a\x9b\xa3\x51\x54\x83\x97\x45\x08\xb3\xff\x6d\x26\xab\xcb\x79\xb0\xd3\x2f\x3d\x9e\xcb\x1b\x29\xc2\xfb\x73\x01\xec\xe3\x47\x15\xc0\x12\x8f\x1c\xee\x0a\xbb\x08\xb2\x3a\xd3\x20\x9c\x22\xe7\x34\x0a\x5a\x03\x70\x24\x42\x37\x64\x78\x72\x5f\x4c\x56\x6a\x6b\x58"
    set SFS_KEY binary "\0\0\0\0\0\0\0\0"
    #log MEMORY_FILE2 0 0x100
    if CRYPT_MODE == 0
        set SFS_AND long 0xfffff000
    else
        set SFS_AND long 0x0f00fff0
    endif
    #set SFS_AND long 0x0000ffff # Russian/German version of ToW2

    set eax long 0
    set ecx long 0
    for x = 0 < SFS_CHECKSUM_SIZE
        getvarchr edx MEMORY_FILE2 x
        math ebp = ecx
        math ecx u<<= 8
        math ebp u>>= 24
        math ecx |= edx
        math ebp *= 4
        getvarchr TMP CRC_TABLE1 ebp long
        math ecx ^= TMP
        math ebp = eax
        math eax u<<= 8
        math ebp u>>= 24
        math eax |= edx
        math ebp *= 4
        getvarchr TMP CRC_TABLE2 ebp long
        math eax ^= TMP 
    next x
    if IL2_MODE == 0
        math edx = eax
        math edx ^= ecx
        math edx &= SFS_AND
        math edx ^= eax
        math eax ^= ecx
        math eax &= SFS_AND
        math eax ^= ecx
        math ecx = edx
    endif
    putvarchr SFS_KEY 0 ecx long
    putvarchr SFS_KEY 4 eax long
    set SFS_CHECKSUM_SIZE long 0
endfunction

startfunction sfs_decrypt
    if DECRYPT_SIZE <= 0
        print "Error: DECRYPT_SIZE in script"
        cleanexit
    endif
    if VERSION >= 0xc9
        for x = 0 < DECRYPT_SIZE
            getvarchr CHR MEMORY_FILE2 x
            math TMP = x
            math TMP /= sfs_decrypt_div
            #xmath TMP "(((x - TMP) >> 1) + TMP) >> 2"  # Russian/German version of ToW2
            math TMP += x
            math TMP &= 7
            getvarchr TMP SFS_KEY TMP
            math CHR ^= TMP
            putvarchr MEMORY_FILE2 x CHR
        next x
    endif
    set DECRYPT_SIZE long 0
endfunction

startfunction get_sfs_name
    get SFS_NAME filename
    math SFS_NAME_LEN = 0
    do
        getvarchr CHR SFS_NAME SFS_NAME_LEN
        if CHR >= 'A'
        if CHR <= 'Z'
            math CHR += 32  # tolower
            putvarchr SFS_NAME SFS_NAME_LEN CHR
        endif
        endif
        math SFS_NAME_LEN += 1
    while CHR != 0
    math SFS_NAME_LEN -= 1
endfunction
