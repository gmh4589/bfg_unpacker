# Worms 3D - StreamMusic.aud

get INFO_SIZE long
get ZERO long
get DUMMY long  # 3
get FILES long
get DUMMY long
getdstring ZERO 12
for i = 0 < FILES
    get INFO_SIZE long
    get ZERO long
    get ZERO long
    get DUMMY long
    get NAME_OFF long
    get INFO_OFF long
    get OFFSET long
    get SIZE long
    get ONE long
    get DUMMY long
    get DUMMY long
    get ONE long
    get ZERO long
    get DUMMY float
    get ZERO long
    get ZERO long
    get ZERO long

    math NAME_OFF + 8
    math INFO_OFF + 8

    savepos TMP
    goto NAME_OFF
    get NAME string
    goto INFO_OFF
    get CODEC short
    get CHANNELS short
    get FREQUENCY long
    get DUMMY long  # 0xc1cc
    get DUMMY short # 0x48
    get BITS short  # 4
    get DUMMY short # 2
    get DUMMY short # 0x40
    goto TMP

    string NAME + ".wav"
    #log NAME OFFSET SIZE
    callfunction TOWAV 1
next i

# Requirements: CODEC, BITS, FREQUENCY, CHANNELS, OFFSET, SIZE and NAME
# Optional:     RIFF_MORE/RIFF_MORE_SIZE, BLKALIGN and SAMPLES
startfunction TOWAV # (aka DUMP_WAV) 0.2
    math AVGBYTES = 0
    if BLKALIGN == 0
        if BITS >= 8
            math BLKALIGN = BITS
            math BLKALIGN / 8
        else
            math BLKALIGN = 1
        endif
        math BLKALIGN * CHANNELS
        math AVGBYTES = FREQUENCY
        math AVGBYTES * BLKALIGN
    endif
    if CODEC == 0x69
        xmath BLOCKALIGN "36 * CHANNELS"
        xmath AVGBYTES "(689 * BLOCKALIGN) + 4"
    endif

    log MEMORY_FILE 0 0
    putdstring "RIFF" 4 MEMORY_FILE
    put 0 long          MEMORY_FILE
    putdstring "WAVE" 4 MEMORY_FILE

    # "fmt "
    putdstring "fmt " 4 MEMORY_FILE
    put 0 long          MEMORY_FILE
    put CODEC short     MEMORY_FILE # wFormatTag: Microsoft PCM Format (0x0001)
    put CHANNELS short  MEMORY_FILE # wChannels
    put FREQUENCY long  MEMORY_FILE # dwSamplesPerSec
    put AVGBYTES long   MEMORY_FILE # dwAvgBytesPerSec
    put BLKALIGN short  MEMORY_FILE # wBlockAlign
    put BITS short      MEMORY_FILE # wBitsPerSample
    if RIFF_MORE_SIZE > 0
        putdstring RIFF_MORE RIFF_MORE_SIZE MEMORY_FILE
    endif
    get MEM_SIZE asize MEMORY_FILE
    math RIFFTMP = MEM_SIZE
    math RIFFTMP - 0x14
    putvarchr MEMORY_FILE 0x10 RIFFTMP long

    # "fact"
    if CODEC != 1
        if SAMPLES > 0
            putdstring "fact" 4 MEMORY_FILE
            put 4 long          MEMORY_FILE
            put SAMPLES long    MEMORY_FILE
        endif
    endif

    # "data"
    putdstring "data" 4 MEMORY_FILE
    put SIZE long       MEMORY_FILE

    get MEM_SIZE asize MEMORY_FILE
    math RIFFTMP = SIZE
    math RIFFTMP + MEM_SIZE
    math RIFFTMP - 8
    putvarchr MEMORY_FILE 4 RIFFTMP long

    log NAME 0 MEM_SIZE MEMORY_FILE
    append
    log NAME OFFSET SIZE
    append
endfunction

