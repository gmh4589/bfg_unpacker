# Metal Gear Solid 2(both Original(PS2), Document(PS2) and Substance(PS2/XBOX) editions)
# Metal Gear Solid The Twin Snakes
# Zone of the Enders The 2nd Runner(both the original(PS2) and Special Edition(PS2) versions)
# Metal Gear Solid 3(both Original(PS2) and Subsistence(PS2 - DVD5x3) versions)

get archive_name basename
get archive_size asize

if archive_name & "stage" | archive_name & "face"
	get sign1 long
	get sign2 long
	if sign1 == 0x00000001
		endian little
		goto 0
		callfunction stage_extract 1
	elif sign1 == 0x10000000
		endian big
		goto 0
		callfunction stage_extract 1
	else
		if sign2 == 0x00010001
			endian little
			goto 0
			callfunction stage_extract 1
		elif sign2 == 0x01000100
			endian big
			goto 0
			callfunction stage_extract 1
		else
			/*
			log MEMORY_FILE 0 0
			set XOR1 long SIGN1
			set XOR2 long SIGN2
			xmath FXOR1 "XOR2 ^ XOR1"
			putvarchr MEMORY_FILE 0 XOR1 long
			putvarchr MEMORY_FILE 4 FXOR1 long
			math x = 8
			do
				get XOR3 long
				math XOR3 ^ 0xf0f0
				xmath FXOR2 "(XOR3 ^ XOR1) ^ 0xf0f0"
				math FXOR2 << 11
				putarray 0 0 FXOR2
				putvarchr MEMORY_FILE x FXOR2 long
				math x + 4
			while x < 0x800
			get STAGE_MSIZE asize MEMORY_FILE
			string NAME p= "stage_dec.dat"
			log NAME 0 STAGE_MSIZE MEMORY_FILE
			*/
			print "Seems to be encrypted(unknown algorithm) and then compressed(zlib)."
			cleanexit
		endif
	endif
#	just in case stage.dat has already been decrypted
#	open FDSE "stage_dec.dat" 0
#	callfunction STAGE_EXTRACT 1
elif archive_name & "codec"
elif archive_name & "slot"
else
	get endian_check long
	endian guess endian_check
	goto 0
	set xz 1
	for y = 0
		log MEMORY_FILE 0 0
		append
		do
			savepos offset
			get dummy01 long
			get size long
			get count1 long
			get zero long
			if dummy01 != 0
				if dummy01 != 0xf0
					log MEMORY_FILE offset size
				else
					log MEMORY_FILE offset size
					break
				endif
			else	
				break
			endif
			math offset += size
			goto offset
		while dummy01 != 0
		append
		get fsize asize MEMORY_FILE
		string name p "%s_%08d" archive_name xz
		if fsize != 0
			log name 0 fsize MEMORY_FILE
		endif
		math xz += 1
	next y
endif

startfunction stage_extract
	get sd01 long
	get sd02 long
	get sd03 short
	get sd04 short
	get sd05 long
	for stg = 0 < sd03
		getdstring stage_name 8
		get stage_offset long
		math stage_offset << 11
		
		savepos stage_tmp1
		goto stage_offset
		get stage_entries long
		math stage_offset == 0x800
		for x = 0 < stage_entries
			if sd04 = 0xcccc
				get h1 byte
				get h2 threebyte
			else
				get h1 threebyte
				get h2 byte
			endif
			get h3 long
		next x
		goto stage_tmp1
	next stg
endfunction
