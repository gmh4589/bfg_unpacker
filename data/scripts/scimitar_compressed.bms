endian big
get ARCHIVE_NAME filename
get ARCHIVE_SIZE asize
set OFFSET long 0
for PACK = 0
    if OFFSET >= ARCHIVE_SIZE
        cleanexit
    endif
	
	findloc COMPRESSED_SIGN binary "\x33\xaa\xfb\x57\x99\xfa\x04\x10"
#	findloc COMPRESSED_SIGN binary "\x10\x04\xfa\x99\x57\xfb\xaa\x33"
	math COMPRESSED_SIGN + 8
	goto COMPRESSED_SIGN

    get VERSION short
    get ZTYPE byte
    if ZTYPE == 0x01
        comtype lzo1x
    elif ZTYPE == 0x02
        comtype lzo2a
    elif ZTYPE == 0x03
        comtype xmemdecompress
	elif ZTYPE == 0x05
        comtype lzo1c
    else
        print "Error: unknown compression type %ZTYPE%"
        cleanexit
    endif
    get MAX_SIZE short
    get MAX_ZSIZE short
    get CHUNKS short

	set AAA1 0
	set AAA2 0
    for i = 0 < CHUNKS
        get SIZE short
        get ZSIZE short
        putarray 0 i SIZE
        putarray 1 i ZSIZE
		math AAA1 += SIZE
		math AAA2 += ZSIZE
		putarray 2 i AAA1
		putarray 3 i AAA2
    next i

    math PRE_ALLOCATE = MAX_SIZE
    math PRE_ALLOCATE *= CHUNKS
    putvarchr MEMORY_FILE PRE_ALLOCATE 0
    log MEMORY_FILE 0 0
    append
    for i = 0 < CHUNKS
        getarray SIZE  0 i
        getarray ZSIZE 1 i
        get CRC long
        savepos OFFSET
        if SIZE == ZSIZE
            log MEMORY_FILE OFFSET SIZE
        else
            clog MEMORY_FILE OFFSET ZSIZE SIZE
        endif
        math OFFSET += ZSIZE
        goto OFFSET
    next i
    append

    get SIZE asize MEMORY_FILE
    set NAME string ARCHIVE_NAME
    string NAME += ".p"
    string NAME += PACK
    log NAME 0 SIZE MEMORY_FILE
next PACK
