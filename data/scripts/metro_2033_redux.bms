# Metro 2033 .vfs unpacker v1.3
# (hhrhhr@gmail.com 03-2010)
# script for QuickBMS http://aluigi.org/papers.htm#quickbms

#get source FILENAME
#open FDSE "content.vfi" 1
#get max_size asize 1
#get ffff long 1
#get chunk_size long 1
#savepos data_pos 1
#math offset = data_pos
#math offset += chunk_size
#set exit_while byte 0
do
	goto offset 1
	get num long 1
	get chunk_size long 1
	savepos data_pos 1
	math offset = data_pos
	math offset += chunk_size
	get num0 long 1
	get strlen_filesize long 1
	get file_name string 1
	get file_size long 1
	if file_name == source
		log MEMORY_FILE data_pos chunk_size 1
		get mem_max_size asize MEMORY_FILE
		math mem_max_size -= 12
		get mem_num0 long MEMORY_FILE
		get mem_strlen_filesize long MEMORY_FILE
		get mem_file_name string MEMORY_FILE
		get mem_file_size long MEMORY_FILE
		get mem_num1 long MEMORY_FILE
		get mem_size long MEMORY_FILE
		do
			get mem_file_crc long MEMORY_FILE
			get mem_file_offset long MEMORY_FILE
			get mem_file_size_unp long MEMORY_FILE
			get mem_file_size_pak long MEMORY_FILE
			get mem_full_path_size long MEMORY_FILE
			math mem_full_path_size -= 1
			math mem_file_crc & 255
			filexor mem_file_crc MEMORY_FILE
			getdstring mem_full_path mem_full_path_size MEMORY_FILE
			filexor 0 MEMORY_FILE
			get tmp byte MEMORY_FILE
			if mem_file_size_unp == mem_file_size_pak
				log mem_full_path mem_file_offset mem_file_size_pak
			else
				callfunction unpack_lz
			endif
			savepos mem_data_pos MEMORY_FILE
		while mem_data_pos < mem_max_size
		set exit_while byte 1
	endif
	if offset >= max_size
		set exit_while byte 1
	endif
while exit_while != 1
###############################################################################
startfunction unpack_lz
#	print "--> %mem_file_offset% %mem_file_size_unp% %mem_file_size_pak% %mem_full_path%"
	log memory_file2 mem_file_offset mem_file_size_pak
	log memory_file3 0 0 #packed chunk
	log memory_file4 0 0 #unpacked chunk
	log memory_file5 0 0 #output file buffer

#	putvarchr memory_file3 131072 0 # preallocate packed chunk	
	putvarchr memory_file4 131072 0 # preallocate unpacked chunk
#	putvarchr memory_file5 mem_file_size_unp 0 # preallocate file buffer
#	log memory_file3 0 0 #packed chunk
#	log memory_file4 0 0 #unpacked chunk
#	log memory_file5 0 0 #output file buffer
	
	set pos long 0 memory_file2
	do
		goto pos memory_file2
		get prfx byte memory_file2
		set head_sz byte 9
		if prfx == 0x7f
			get size_pak long memory_file2
			get size_unp long memory_file2
			callfunction unpack_chunk 1
		elif prfx == 0x7e
			get size_pak long memory_file2
			get size_unp long memory_file2
#			print "--> prefix 0x7E pak:%size_pak% unp:%size_unp%"
			callfunction copy_chunk 1
		elif prfx == 0x7d
			get size_pak byte memory_file2
			get size_unp byte memory_file2
			set head_sz byte 3
#			print "--> prefix 0x7D pak:%size_pak% unp:%size_unp%"
			callfunction unpack_chunk 1
		elif prfx == 0x7c
			get size_pak byte memory_file2
			get size_unp byte memory_file2
			set head_sz byte 3
#			print "--> prefix 0x7C pak:%size_pak% unp:%size_unp%"
			callfunction copy_chunk 1
		endif
	while pos < mem_file_size_pak

	get outsize asize memory_file5
	if outsize != mem_file_size_unp
		print "!!!!!!!!!! %outsize% != %mem_file_size_unp% !!!!!!!!!!!"
		cleanexit
	endif
	log mem_full_path 0 outsize memory_file5
#	print "!!!!!!!!!!!!debug exit!!!!!!!!!!!!"
#	cleanexit
endfunction

startfunction unpack_chunk
	math pos += size_pak
	math size_pak -= head_sz
	savepos pos1 memory_file2
	log memory_file3 pos1 size_pak memory_file2 #packed data -> memory
	calldll "unpack_upk.exe" 0x1300 cdecl "" memory_file3 memory_file4 size_unp
	append
	log memory_file5 0 size_unp memory_file4
	append
endfunction

startfunction copy_chunk
	math pos += size_pak
	math size_pak -= head_sz
	savepos pos1 memory_file2
	append
	log memory_file5 pos1 size_pak memory_file2 #unpacked data -> output buffer
	append
endfunction