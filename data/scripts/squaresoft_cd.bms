# SquareSoft's "Development Part 3" Division(開発第3部)* - Xenogears
# SquareSoft's "Third Production" Division(第3プロダクション)* - Dewprism/Threads of Fate, Chrono Cross
# * - https://www13.atwiki.jp/game_staff/pages/57.html
# ---
# script by AnonBaiter

get CD_EXT extension
if CD_EXT == "cue" || CD_EXT == "bin"
	open FDDE "bin" 0
	open FDDE "cue" 1
else
	print " %CD_EXT% is not supported by this script yet.\n just find a way to approach me about this."
	cleanexit
endif

math ISOTYPE = 0

get CD_SIZE asize
putvarchr MEMORY_FILE3 CD_SIZE 0
log MEMORY_FILE3 0 0
append
for OFFSET = 0xca20 u< 0x178b0
    idstring "\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00"
    get DUMMY1_01 threebyte
	get MODE byte
    get DUMMY2_01 byte
	get DUMMY2_02 byte
	get DUMMY2_03 byte
	get DUMMY2_04 byte
    get DUMMY3_01 byte
	get DUMMY3_02 byte
	get DUMMY3_03 byte
	get DUMMY3_04 byte
	savepos OFFSET
	log MEMORY_FILE3 OFFSET 0x800
	math OFFSET + 0x800
	math OFFSET + 0x118
    goto OFFSET
next
append

get SIZE asize MEMORY_FILE3

set PATH string ""
set NAME string ""
math ISO9660_OFFSET = 0xb000

math ENTRY = -1
callfunction PARSE_ISO9660 1

# parsing ISO9660 data
startfunction PARSE_ISO9660
	savepos BACK_OFF MEMORY_FILE3
	string PATH + NAME
	string PATH + /
	math ENTRY_LIMIT = ISO9660_OFFSET
	math ENTRY_OFF = ISO9660_OFFSET
	do
		goto ENTRY_OFF MEMORY_FILE3
		get ENTRY_SIZE byte MEMORY_FILE3
		if ENTRY_SIZE == 0
			# the CD itself has only two files stored like this i guess
			# it's like this with every game listed at the beginning of the script
			break
		endif
		get EXTRA_SIZE byte MEMORY_FILE3
		get OFFSET_LE long MEMORY_FILE3
		get OFFSET_BE long MEMORY_FILE3
		get SIZE_LE long MEMORY_FILE3
		get SIZE_BE long MEMORY_FILE3
		getdstring DUMMY3 6 MEMORY_FILE3
		get DUMMY4 byte MEMORY_FILE3
		get FLAGS byte MEMORY_FILE3
		get DUMMY6 byte MEMORY_FILE3
		get DUMMY7 byte MEMORY_FILE3
		get DUMMY8_LE short MEMORY_FILE3
		get DUMMY8_BE short MEMORY_FILE3
		get NAMESIZE byte MEMORY_FILE3
		getdstring NAME NAMESIZE MEMORY_FILE3
		getdstring DUMMY9 4 MEMORY_FILE3
		get IS_XA byte MEMORY_FILE3
		get XA_SIGN threebyte MEMORY_FILE3
		getdstring DUMMY10 6 MEMORY_FILE3

		string NAME > ";"
		#math OFFSET_LE * 0x800
		if FLAGS & 2
			getvarchr TMP NAME 0
			if TMP == 0x00
				math ENTRY_LIMIT + SIZE_LE
			elif TMP == 0x01
			else
				math ISO9660_OFFSET = OFFSET_LE
				math ISO9660_OFFSET * 0x800
				callfunction PARSE_ISO9660
			endif
		else
			math OFFSET_LE * 0x930
			string ISO9660_FNAME p "%s%s" PATH NAME
			callfunction DECOMPRESS_CDFILE1 1
			log ISO9660_FNAME 0 SIZE_LE MEMORY_FILE
		endif
		math ENTRY_OFF + ENTRY_SIZE
		math ENTRY_OFF + EXTRA_SIZE
	while ENTRY_OFF u< ENTRY_LIMIT
	goto BACK_OFF MEMORY_FILE3
endfunction

goto 0xb800 MEMORY_FILE3
getdstring TITLE1 16 MEMORY_FILE3
getdstring TITLE2 16 MEMORY_FILE3
getdstring TITLE3 16 MEMORY_FILE3
if TITLE1 == "DS01_XENOGEARS"
	math ISOTYPE = 1
elif TITLE1 == "DS02_XENOGEARS"
	math ISOTYPE = 1
else
	if TITLE3 == "CHRONOCROSS"
		math ISOTYPE = 2
	elif TITLE3 == "DEWPRISM"
		math ISOTYPE = 2
	else
		print "i guess this script cannot work with your average CD ISO9660 file. aborting now..."
		cleanexit
	endif
endif

if ISOTYPE = 1
	goto 0xc000 MEMORY_FILE3
	for
		get OFFSET_LE threebyte MEMORY_FILE3
		get SIZE_LE long MEMORY_FILE3

		if OFFSET_LE == 0xffffff && SIZE_LE == 0
			break
		endif

		xmath XGOFFSET "OFFSET_LE * 0x930"
		if SIZE_LE >= 0x800
			xmath XG_TMP2 "XGOFFSET + 0x10"
			savepos XG_TMP1
			goto XG_TMP2
			get STR byte
			if STR == 0
				xmath XGSIZE "(SIZE_LE / 0x800) * 0x930"
				xmath XG_TMP3 "(XGOFFSET + XGSIZE) + 0x12"
				goto XG_TMP3
				get TYPE2 byte
				if TYPE2 == 0x89
					# in some cases, this is to avoid missing out
					# at least one "CD sector" out of a file
					math XGSIZE + 0x930
				endif
			elif STR == 1
				xmath XGSIZE "(SIZE_LE / 0x920) * 0x930"
			endif
			goto XG_TMP1
		else
			set XGSIZE long SIZE_LE
		endif

		string XFNAME p "%s\0x%06x_0x%08x." TITLE1 OFFSET_LE SIZE_LE

		set FOFFSET1 long XGOFFSET
		set FSIZE1 long XGSIZE
		if STR == 0
			if SIZE_LE u>= CD_SIZE
			elif SIZE_LE == 0
			else
				callfunction DECOMPRESS_CDFILE2 1
				log XFNAME 0 M1_FSIZE MEMORY_FILE
			endif
		elif STR == 1
			if SIZE_LE u>= CD_SIZE
			elif SIZE_LE == 0
			else
				string XFNAME += "str"
				log XFNAME XGOFFSET XGSIZE
			endif
		endif
	next
elif ISOTYPE = 2
	goto -48 MEMORY_FILE3 SEEK_CUR
	get DISC_ID short MEMORY_FILE3
	get AAA02 short MEMORY_FILE3
	get FND_OFF byte MEMORY_FILE3
	get AAA04 byte MEMORY_FILE3
	get FND_SIZE short MEMORY_FILE3
	get MDE_OFF byte MEMORY_FILE3
	get AAA07 byte MEMORY_FILE3
	get MDE_SIZE short MEMORY_FILE3
	get FID_OFF byte MEMORY_FILE3
	get AAA10 byte MEMORY_FILE3
	get FID_SIZE short MEMORY_FILE3
	getdstring AAA12 16 MEMORY_FILE3
	getdstring TITLE2 16 MEMORY_FILE3
	xmath FND_OFF2 "FND_OFF * 0x800"
	xmath MDE_OFF2 "MDE_OFF * 0x800"
	xmath FID_OFF2 "FID_OFF * 0x800"
	log MEMORY_FILE2 MDE_OFF2 MDE_SIZE MEMORY_FILE3

	math STR = 0
	for
		savepos MDE_TMP1 MEMORY_FILE2
		get AAA4 long MEMORY_FILE2
		goto MDE_TMP1 MEMORY_FILE2
		getbits AAA1 20 MEMORY_FILE2
		getbits AAA2 4 MEMORY_FILE2
		getbits AAA3 8 MEMORY_FILE2
		savepos MDE_OFF2 MEMORY_FILE2
		savepos MDE_TMP2 MEMORY_FILE2
		if AAA1 == 0
			break
		endif
		xmath MDE_OFFSET1 "AAA1 * 0x930"
		xmath MDE_REMAINING1 "AAA3 * 8"

		getbits AAA1_1 20 MEMORY_FILE2
		if AAA1_1 == 0
			break
		endif
		xmath MDE_SIZE1 "(AAA1_1 - AAA1) * 0x930"
		goto MDE_TMP2 MEMORY_FILE2

		string MDE_FNAME p "%s\%08x." TITLE3 AAA4

		set FOFFSET1 long MDE_OFFSET1
		set FSIZE1 long MDE_SIZE1

		savepos MDE_TMP3
		xmath MDE_TMP4 "MDE_OFFSET1 + 0x18"
		goto MDE_TMP4
		get EXTRA_INFO1 short
		get EXTRA_INFO2 short
		get EXTRA_INFO3 short
		get EXTRA_INFO4 short
		if MDE_SIZE1 != 0
			if EXTRA_INFO1 == 0x160
				if EXTRA_INFO2 == 0 || EXTRA_INFO2 == 0x100
					if EXTRA_INFO3 == 0
						if EXTRA_INFO4 == 2
							math STR = 1
						endif
					endif
				endif
			endif

			if STR = 0
				callfunction DECOMPRESS_CDFILE2 1
				log MDE_FNAME 0 M1_FSIZE MEMORY_FILE
			elif STR = 1
				string MDE_FNAME += "str"
				log MDE_FNAME MDE_OFFSET1 MDE_SIZE1
			endif
		endif
		goto MDE_TMP3
	next
endif

startfunction DECOMPRESS_CDFILE1
	putvarchr MEMORY_FILE SIZE_LE 0
	log MEMORY_FILE 0 0
	if SIZE_LE < 0x800
		set SIZE_LE2 long 0x930
	else
		xmath SIZE_LE2 "SIZE_LE / 0x800"
		math SIZE_LE2 * 0x930
	endif

	xmath SIZE_LE_LIMIT "OFFSET_LE + SIZE_LE2"
	append
	goto OFFSET_LE
	for OFFSET2 = OFFSET_LE u< SIZE_LE_LIMIT
		savepos OFFSET3
	    idstring "\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00"
	    get DUMMY1_01 threebyte
		get MODE byte
		get DUMMY2_01 byte
		get DUMMY2_02 byte
		get DUMMY2_03 byte
		get DUMMY2_04 byte
		get DUMMY3_01 byte
		get DUMMY3_02 byte
		get DUMMY3_03 byte
		get DUMMY3_04 byte
		savepos OFFSET2
		if DUMMY2_01 == 0 && DUMMY3_01 == 0
			if DUMMY2_02 == 0 && DUMMY3_02 == 0
				if DUMMY2_04 == 0 && DUMMY3_04 == 0
					if DUMMY2_03 == 0x08 && DUMMY3_03 == 0x08
						log MEMORY_FILE OFFSET2 0x800
					elif DUMMY2_03 == 0x89 && DUMMY3_03 == 0x89
						log MEMORY_FILE OFFSET2 0x800
					endif
				endif
			endif
		else
			log MEMORY_FILE OFFSET3 0x930
		endif
		math OFFSET2 + 0x918
	    goto OFFSET2
	next
	append
endfunction

# copy-pasted from above "function" with a few changes to suit each ISOTYPE value
startfunction DECOMPRESS_CDFILE2
	putvarchr MEMORY_FILE FSIZE1 0
	log MEMORY_FILE 0 0
	math FSIZE2 = FSIZE1

	xmath FSIZE_LIMIT "FOFFSET1 + FSIZE2"
	append
	goto FOFFSET1
	for OFFSET2 = FOFFSET1 u< FSIZE_LIMIT
		savepos OFFSET3
	    idstring "\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00"
	    get DUMMY1_01 threebyte
		get MODE byte
		get DUMMY2_01 byte
		get DUMMY2_02 byte
		get DUMMY2_03 byte
		get DUMMY2_04 byte
		get DUMMY3_01 byte
		get DUMMY3_02 byte
		get DUMMY3_03 byte
		get DUMMY3_04 byte
		savepos OFFSET2
		if DUMMY2_01 == 0 && DUMMY3_01 == 0
			if DUMMY2_02 == 0 && DUMMY3_02 == 0
				if DUMMY2_04 == 0 && DUMMY3_04 == 0
					if DUMMY2_03 == 0x08 && DUMMY3_03 == 0x08
						log MEMORY_FILE OFFSET2 0x800
					elif DUMMY2_03 == 0x89 && DUMMY3_03 == 0x89
						log MEMORY_FILE OFFSET2 0x800
					endif
				endif
			endif
		endif
		math OFFSET2 + 0x918
	    goto OFFSET2
	next
	append

	get M1_FSIZE asize MEMORY_FILE
	if M1_FSIZE != 0
		if ISOTYPE = 1
			xmath XGSIZE_REMAINING "M1_FSIZE - SIZE_LE"
			math M1_FSIZE - XGSIZE_REMAINING
		elif ISOTYPE = 2
			math M1_FSIZE - MDE_REMAINING1
		endif
	endif
endfunction
