# game: Deus Ex: Human Revolution
# platform: Xbox 360
# file type: *.mul
# program needed: xma_parse (http://www.hcs64.com/vgm_ripping.html)
# script type: extractor (script 2)

# (c) by AlphaTwentyThree of Zenhax
# script for QuickBMS http://quickbms.aluigi.org

endian big
goto 0
get FREQ long
set OFFSET 0x800
get FSIZE asize
putVarChr MEMORY_FILE FSIZE 0
putVarChr MEMORY_FILE2 FSIZE 0
log MEMORY_FILE 0 0
log MEMORY_FILE2 0 0
do
   goto OFFSET
   get IDENT long
   get SIZE long # block size
   math SIZE x= 0x10 # for some cases
   get DUMMY longlong
   savepos OFFSET
   if IDENT == 0 # audio block
      append
      log MEMORY_FILE OFFSET SIZE
      append
   endif
   math OFFSET += SIZE
while OFFSET < FSIZE
get FSIZE asize MEMORY_FILE
putVarChr MEMORY_FILE2 FSIZE 0
putVarChr MEMORY_FILE3 FSIZE 0
putVarChr MEMORY_FILE4 FSIZE 0
log MEMORY_FILE2 0 0
log MEMORY_FILE3 0 0
log MEMORY_FILE4 0 0
set OFFSET 0
do
   goto OFFSET MEMORY_FILE
   get SIZE long MEMORY_FILE
   get IDENT long MEMORY_FILE
   get DUMMY longlong MEMORY_FILE
   savepos OFFSET MEMORY_FILE
   append
   if IDENT == 0
      log MEMORY_FILE3 OFFSET SIZE MEMORY_FILE
   elif IDENT == 1
      log MEMORY_FILE4 OFFSET SIZE MEMORY_FILE
   endif
   append
   math OFFSET += SIZE
while OFFSET < FSIZE
endian little
set CH 1
set BLOCKSIZE 0x8000

get SIZE asize MEMORY_FILE3
log MEMORY_FILE 0 0
append
log MEMORY_FILE 0 SIZE MEMORY_FILE3
append
callfunction parse 1
log MEMORY_FILE3 0 0 # clear now for header
get NAME basename
string NAME += "_1.xma"
callfunction XMA 1

get SIZE asize MEMORY_FILE4
if SIZE != 0
   log MEMORY_FILE 0 0
   log MEMORY_FILE2 0 0
   append
   log MEMORY_FILE 0 SIZE MEMORY_FILE4
   append
   callfunction parse 1
   log MEMORY_FILE3 0 0 # clear now for header
   get NAME basename
   string NAME += "_2.xma"
   callfunction XMA 1
endif

startfunction parse
   endian little # just to be sure ;)
   set FUNCCALL string "xma_parse.exe #INPUT# -r #OUTPUT#"
   comtype EXECUTE FUNCCALL
   log MEMORY_FILE2 0 0
   clog MEMORY_FILE2 0 SIZE SIZE MEMORY_FILE # from mem [to temp] to mem2 (mem stays)
   encryption "" ""
endfunction

startfunction XMA # variant of standard function (mem2 to mem3)
   get MSIZE asize MEMORY_FILE2
   set RIFFSIZE MSIZE
   math RIFFSIZE += 0x34
   set PRESIZE RIFFSIZE # pre-alloc
   math PRESIZE += 0x38
   putVarChr MEMORY_FILE3 PRESIZE 0
   log MEMORY_FILE3 0 0
   set MEMORY_FILE3 binary "\x52\x49\x46\x46\xb8\x59\xa7\x00\x57\x41\x56\x45\x66\x6d\x74\x20\x20\x00\x00\x00\x65\x01\x10\x00\xd6\x10\x00\x00\x01\x00\x00\x03\xe3\x9a\x00\x00\x80\xbb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02\x00\x64\x61\x74\x61\x00\x58\xa7\x00"
   putVarChr MEMORY_FILE3 0x04 RIFFSIZE long
   putVarChr MEMORY_FILE3 0x24 FREQ long
   putVarChr MEMORY_FILE3 0x31 CH byte
   putVarChr MEMORY_FILE3 0x38 MSIZE long
   append
   log MEMORY_FILE3 0 MSIZE MEMORY_FILE2
   append
   get M3_SIZE asize MEMORY_FILE3
   log NAME 0 M3_SIZE MEMORY_FILE3
endfunction