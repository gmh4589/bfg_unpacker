# Score Hero bnk (script 0.2.3a)
# script for QuickBMS http://quickbms.aluigi.org

idstring "XBNK"
get VER1 short  # 1
if VER1 >= 0x0100
    endian big
endif
get VER2 short  # 2
get FILES long
for i = 0 < FILES
    set NAME string ""
    get OFFSET long
    get SIZE long
    get ZERO long
    if VER2 >= 3
        getdstring NAME 0x40
    endif

    savepos TMP_OFF
    goto OFFSET
    get CODEC short
    get CHANNELS short
    get FREQUENCY long
    get SAMPLES long
    get BLKALIGN short
    get BITS short

    set EXT string "wav"
    if CODEC >= 0xfff0  # 0xfff0 for ogg
        get PCM_SIZE long
        set EXT string "ogg"
    elif CODEC == 2     # msadpcm
        get RIFF_MORE_SIZE short
        math RIFF_MORE_SIZE + 2
        goto -2 0 SEEK_CUR
        getdstring RIFF_MORE RIFF_MORE_SIZE
    endif

    savepos TMP
    math TMP - OFFSET
    math OFFSET + TMP
    math SIZE   - TMP

    if NAME == ""
        string NAME p "%d.%s" i EXT
    else
        string NAME + "."
        string NAME + EXT
    endif
    if EXT == "wav"
        callfunction TOWAV 1
    else
        log NAME OFFSET SIZE
    endif

    goto TMP_OFF
next i

# Requirements: CODEC, BITS, FREQUENCY, CHANNELS, OFFSET, SIZE and NAME
# Optional:     RIFF_MORE/RIFF_MORE_SIZE, BLKALIGN and SAMPLES
startfunction TOWAV # (aka DUMP_WAV) 0.2
    math AVGBYTES = 0
    if BLKALIGN == 0
        if BITS >= 8
            math BLKALIGN = BITS
            math BLKALIGN / 8
        else
            math BLKALIGN = 1
        endif
        math BLKALIGN * CHANNELS
        math AVGBYTES = FREQUENCY
        math AVGBYTES * BLKALIGN
    endif
    if CODEC == 0x69
        xmath BLOCKALIGN "36 * CHANNELS"
        xmath AVGBYTES "(689 * BLOCKALIGN) + 4"
    endif

    log MEMORY_FILE 0 0
    putdstring "RIFF" 4 MEMORY_FILE
    put 0 long          MEMORY_FILE
    putdstring "WAVE" 4 MEMORY_FILE

    # "fmt "
    putdstring "fmt " 4 MEMORY_FILE
    put 0 long          MEMORY_FILE
    put CODEC short     MEMORY_FILE # wFormatTag: Microsoft PCM Format (0x0001)
    put CHANNELS short  MEMORY_FILE # wChannels
    put FREQUENCY long  MEMORY_FILE # dwSamplesPerSec
    put AVGBYTES long   MEMORY_FILE # dwAvgBytesPerSec
    put BLKALIGN short  MEMORY_FILE # wBlockAlign
    put BITS short      MEMORY_FILE # wBitsPerSample
    if RIFF_MORE_SIZE > 0
        putdstring RIFF_MORE RIFF_MORE_SIZE MEMORY_FILE
    endif
    get MEM_SIZE asize MEMORY_FILE
    math RIFFTMP = MEM_SIZE
    math RIFFTMP - 0x14
    putvarchr MEMORY_FILE 0x10 RIFFTMP long

    # "fact"
    if CODEC != 1
        if SAMPLES > 0
            putdstring "fact" 4 MEMORY_FILE
            put 4 long          MEMORY_FILE
            put SAMPLES long    MEMORY_FILE
        endif
    endif

    # "data"
    putdstring "data" 4 MEMORY_FILE
    put SIZE long       MEMORY_FILE

    get MEM_SIZE asize MEMORY_FILE
    math RIFFTMP = SIZE
    math RIFFTMP + MEM_SIZE
    math RIFFTMP - 8
    putvarchr MEMORY_FILE 4 RIFFTMP long

    log NAME 0 MEM_SIZE MEMORY_FILE
    append
    log NAME OFFSET SIZE
    append
endfunction
