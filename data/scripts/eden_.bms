# Eden* (script 0.2)
#   The script extracts automatically ALL the archives.
#   The full game is NOT supported yet except for some types of files (wav, txt).
# script for QuickBMS http://quickbms.aluigi.org

math KEY_SIZE   = 0x20
math KEY2_SIZE  = 0x100
math IS_TRIAL   = 0

putarray 0 -1 "scr"
putarray 0 -1 "bg"
putarray 0 -1 "bg"
putarray 0 -1 "st"
putarray 0 -1 "sys"
putarray 0 -1 "bgm"
putarray 0 -1 "voice"
putarray 0 -1 "se"
putarray 0 -1 "se"
putarray 0 -1 "mov"
putarray 0 -1 ""

putarray 1 0 "" # avoid copies

for PAZ_DB = 0
    getarray PAZ_NAME 0 PAZ_DB
    if PAZ_NAME == ""
        break
    endif
next PAZ_DB

for PAZ_NUM = 0 < PAZ_DB
    getarray PAZ_NAME 0 PAZ_NUM

    getarray COPY_NAME 1 0
    putarray 1 0 PAZ_NAME

    if PAZ_NAME != COPY_NAME
        set TMP string PAZ_NAME
        string TMP += ".paz"
        open FDSE TMP 0 EXISTS
        if EXISTS != 0

            getdstring MAGIC 0x20
            if MAGIC & "trial"   # eden_trial_en
                set MEMORY_FILE2 binary "\xe4\x08\xa1\xe1\xd4\xb5\x6c\x3c\x4b\x08\x2b\x28\xcb\xd8\xfd\x26\xb2\x21\x84\x72\x7a\x98\xec\xb1\x1d\xf5\x55\x58\x97\x2a\x59\x26\xb7\x3f\x92\x5d\x17\xe0\xf7\x57\xa1\x8b\x78\x79\xd3\x18\xfe\x62\x85\x0e\xd5\x89\x15\xdb\x10\xbf\xf0\xea\x22\xcf\xd0\x9c\xcc\xc0\x0a\x58\xef\xc7\x36\x10\x89\x99\x9d\x6f\xfb\x4e\x19\x5f\x9c\x8b\xf5\xc0\x3a\x78\xe1\x90\x0f\xed\xfd\x9f\xa6\xc7\x31\xc4\x32\x3b\x05\xf2\xe1\x17\xcf\x7d\xdd\xa3\x4a\x98\xa6\x30\xcf\xdc\x9f\x2b\xab\xab\x96\x0a\xc6\x91\xc5\x4c\x56\xbf\xab\x67\x51\x96\xf9\x75\x09\x35\xe5\x19\x52\x55\x56\xf3\xd4\x49\x64\x79\x63\xe9\x24\xfd\x96\x4a\x8a\xcc\xb8\xf4\x3d\x58\xf4\xca\x40\x70\xe0\xef\xd1\x51\xc4\x1d\xfc\x01\xc1\x86\xd4\xb2\x98\x28\xdf\x4c\xfa\x4e\x95\xb8\xda\x09\x21\x98\x37\xda\x5a\xe3\x11\x58\xd0\xbb\x0d\x32\xf3\xb6\x6e\x42\xd2\xd7\xb3\x65\x87\x91\x56\x0b\x62\x78\x34\xcd\x6a\x3a\x4a\x29\xd4\xec\x10\xca\xd7\xa7\x53\x9a\xb1\x65\xd7\xfa\xa0\x1d\x86\x28\xe3\xbe\xc9\x99\x76\x89\x8a\x78\x89\x7a\xbf\x3f\x2f\x01\xdb\x4b\xe8\x84\xca\x1e\x35\xd4\xe5\x89\x29\x72\xd6\x9b\x62\x49\xb7\xb2\x7c\xfd\x7a\x96\xa3\x94\x7a\xf4\x19\xb6\x66\xac\xaf\x94\x84\x20\xc4\x56\xe5\xa0\x1c\x1b\x10\xd1\xd1\xe3\x8e\x5c\xd6\x94\x6d\x3f\x00\x77\xcb\xbc\x52\xcd\x3b\xd0\x44\x54\xf5\x2d\xa7\xdf\x87\x89\xb0\xda\xa8\x8f\xcb\xd8\xba\xb2\xdf\xfb\x9e\xab\xd9\xe2\x2e\x55\xda\xe8\x33\xb5\x5a\xdb\xba\xc5\x47\xa4\x2a\xb2\x47\xec\x23\x8f\x7c\xae\xd8\x2f\x10\xf5\x69\x51\x94\xef\x52\xd9\x2a\x4d\x59\x73\xd8\xc1\xf0\xe5\x79\xa3\xb6\xd8\x71\xa6\xee\x96\xc6\x6b\x65\x68\x82\x06\xcd\x07\x8d\x0e\xaa\x31\xc7\x58\xc7\x40\xcd\x67\xc1\xc0\x45\xb8\x16\xcf\xe4\x8b\xc2\x41\x4e\xf6\x32\x7f\x25\xa3\x6e\x37\x1d\xc8\x61\x1e\x48\xde\x6b\xe9\x90\x2d\xe1\xcc\x5d\xd7\x90\x5b\x68\x3e\x63\xf9\xd2\xf5\x6e\x1f\xb9\xfd\x2d\xfd\x79\x21\xa0\x1d\x99\xa0\x53\x9c\x97\xe2\x2c\x56\xd2\xb8\x49\xb8\xf9\xf6\xb3\xeb\x18\xeb\xd9\x83\x04\x96\x93\x27\xf7\x5c\x79\x33\xee\xb8\xfc\x57\xa9\x62\xf4\xe9\x2c\xbe\xf2\xb9\x5d\x8a\x2f\x6b\xb2\xb2\x8b\x80\xb5\x54\x01\x5a\x97\x52\x23\x6c\xd1\xa9\x7f\xde\xc7\x2e\xd4\x03\x42\x4b\x4c\x05\xe1\xcd\xcf\xac\x05\x4b\xd7\x1a\xdf\x03\xbe\x2a\x15\xc2\xf3\x93\x9a\xcc\xb1\xc8\x09\x90\x45\x5d\xee\x0d\xc9\xcc\x8d\xed\x89\x38\x1b\x1e\x11\xb7\xa3\x42\xc7\x09\x15\x8d\x11\x9d\x53\xd4\x32\x7e\x05\x18\xa9\xc9\xe5\x97\x9e\x35\x9e\x3b\xb1\xda\xc4\xad\x0b\xa8\x34\x2f\x1a\x6a\xde\x53\x09\x70\x16\x54\xc2\x28\x60\x7b\xc3\x6f\x52\x87\xc5\x03\xca\x27\xdd\x8c\x21\x90\x4b\x36\x59\x2f\x64\xd0\x13\xae\x41\x3e\xe2\x77\xa7\xd9\x01\x1e\x4e\x8f\xaf\xbd\x3e\x4f\x24\xca\x3b\x87\xff\x2f\xd2\x81\xa9\xe0\x6b\x9a\x6c\x11\x80\x71\x66\xea\x65\x89\x0b\xf5\xf9\xab\xe4\xcb"
                math IS_TRIAL = 1
            else                # eden_en
                set MEMORY_FILE2 binary "\x58\x96\x17\x7d\xb2\x2b\xc2\xc6\x86\x0b\x51\xd7\x2d\x45\x14\xb1\x4b\x82\x8f\xa8\xcf\xd0\x9a\x8a\x8d\x3e\xe3\x2c\xc2\x10\x1d\x8e\x91\x59\x79\x40\x0a\xf2\x42\xd5\x41\xdb\xd8\x13\x83\x62\x17\xfd\x1c\xd5\xa7\x28\x65\xa2\x71\xd7\x70\xf1\x10\xe4\x80\xc3\x84\x0f\x3b\x80\x8b\x0b\x8a\x83\xf2\x95\x61\xaf\xa4\x1d\x87\x14\x30\x92\x9f\xb3\xfc\x6a\x77\xf3\xd3\x38\x53\xb5\xb2\x2a\x59\xfd\x51\x3b\xe0\x78\x53\x27\x72\xc9\xda\xb9\x79\x3d\xf7\x9c\xd9\xf6\xb1\x53\xca\x51\x7e\x19\x54\x14\x8a\x34\x4a\xd3\x73\xb1\xae\x8c\x9f\xf5\x59\x5c\xbe\x07\xb3\x50\x29\x39\x8b\x2f\x4e\xb8\xb6\xb2\xfb\x88\x25\x6d\x48\xe6\xa7\xf8\x63\xd7\xa2\xf7\x76\xc3\x9f\x12\x81\x55\x0c\x6b\x70\xb5\x9a\xd4\xd0\x0f\x39\x8d\xc6\xf7\x9b\x05\x0e\x58\x32\x50\x59\x8c\x02\x41\x5f\xa1\x87\xdd\x9c\x92\xd5\x7b\x0b\x72\x47\xd4\xcd\x61\x6d\x8a\xdd\xab\x85\x12\xbd\xcb\xff\xe7\x77\x52\xe3\x64\xf6\x84\x8d\xa5\xc7\x4f\xe0\x78\x5e\xc6\x4a\x48\xd5\x6a\xd7\xd5\x93\xe9\xb9\xa1\x44\xc8\xb8\xf2\xab\xf1\x6a\x3b\xcc\x20\x2e\xe5\x42\xea\x16\xf3\x4a\x5b\x9c\x13\x18\xd0\xcf\xab\x50\x4c\x59\xe2\xfb\xdb\x41\xaa\xc4\xb1\xa5\x07\xfc\xd5\x6e\x52\x0c\x71\xf3\x59\xe0\xff\xbd\x1f\x17\xd3\x09\x19\x19\x8a\xdf\xa5\xce\xff\xe8\x32\x04\x65\x3f\x56\x32\xd7\x14\x30\xd8\x50\xbf\x99\x24\x0a\xa0\x01\xfa\x09\x73\x00\xfa\xc3\xf4\x22\x24\x39\xfd\xbc\x3d\x99\x6e\xac\x11\x4d\x26\xc5\x41\xe2\x15\x6a\x03\x48\xd7\x1c\xc0\xed\xaa\x6a\xb6\x2e\x0e\x9c\xb1\x33\x6e\xc3\x22\x3d\xfe\xa2\x7b\x13\xf1\x0c\x71\x30\x53\x64\xe4\xd0\xb9\xfb\x0f\xd4\xaa\xfd\x4e\x7b\xfa\x51\xa1\x9a\xea\x6b\xe5\x66\x31\x4d\x9c\x81\x1e\x20\xe9\x86\x7c\xb6\xf8\x97\x9b\x74\xdd\x9d\xa5\x8c\x9a\x01\xef\x2a\xfb\x37\xa2\x36\xb5\x65\x97\xa4\x1f\x95\x92\xe2\x1d\xa8\x38\x6c\x11\xd6\x51\x24\x0c\xcb\xb3\x1d\x7d\xaa\x46\x1d\x31\x1a\x5f\x4e\x87\x82\xbd\x9c\x6a\x93\x67\x37\x32\xfa\xe7\xb6\x4e\x07\xd9\x4b\x78\x60\x6c\x72\x2c\x6e\xeb\xf5\xab\x8b\xbd\x3f\x69\x1c\x13\x35\x30\x99\xb7\xd8\x98\x99\xf0\x14\x7f\x4e\xd9\x64\xcd\xf7\x58\xbd\x58\x45\x25\xe8\x41\xf8\xbb\x59\x3a\x00\x6e\x1a\x46\x5b\x4a\x5d\x58\xd6\x92\xea\x91\xfd\x0d\xd7\x5d\x7d\x00\x40\x0d\xae\xdf\x91\xe0\xc6\x16\xe3\x03\xc3\x91\xae\xc8\x09\x63\x3b\x64\x38\xcc\x35\x50\xad\xa7\x21\x83\x27\x5f\x8e\x3d\xe9\x94\xc3\x33\xd5\x7a\x5f\x0f\x2b\x4b\x1e\xa8\x11\xdc\x3f\x70\x1e\x2d\x62\x82\xd0\x4a\x7e\x08\x44\xd9\xdc\x32\x99\x28\xb2\xf0\xb9\x4d\xb5\x2c\x68\x63\xd2\x9c\xd2\xdf\xad\x94\x18\x0f\x90\x46\xf7\xec\x28\x03\xcf\xa9\x38\x42\x37\x36\xad\x1a\x6b\x98\x1d\xbe\x2d\xb0\x71\x63\x46\x4b\x74\x49\x32\x4f\xf8\x6d\x1c\xde\x0e\x5b\x41\x39\x59\xe7\x46\x63\x75\x40\xe5\xe9\xee\x15\x3f\x85\x5b\x75\xc8\x80\xa6\x67\x55\x95\x47\x29\x77"
                math IS_TRIAL = 0
            endif

            xmath KEY_OFFSET "(PAZ_NUM) * KEY_SIZE"
            callfunction SET_KEY 1

            get SIZE long
            log MEMORY_FILE 0x24 SIZE
            get FILES long MEMORY_FILE

            for i = 0 < FILES
                encryption "" ""
                filexor ""

                # Please note that mov.paz is (intentionally?) different than the other PAZs.
                # The following work-around is useful only to read the index (the 2 files are encrypted?)
                get NAME string MEMORY_FILE
                strlen NAMESZ NAME
                if i == 0
                if NAMESZ > 0x40
                    log MEMORY_FILE7 4 KEY2_SIZE MEMORY_FILE
                    goto 4 MEMORY_FILE
                    getdstring DUMMY KEY2_SIZE MEMORY_FILE
                    get NAME string MEMORY_FILE
                endif
                endif

                get OFFSET longlong MEMORY_FILE
                get SIZE long MEMORY_FILE
                get ZSIZE long MEMORY_FILE
                get XSIZE long MEMORY_FILE
                get ZIP long MEMORY_FILE

                set EXT extension NAME
                math KEY_VER = 2
                if IS_TRIAL != 0
                    if EXT != "avi"
                        math KEY_VER = 1
                    endif
                else

                    # not supported yet!
                    math KEY_VER = 1

                    if EXT != "png"
                    if EXT != "sc"
                    if EXT != "ogg"
                        math KEY_VER = 1
                    endif
                    endif
                    endif
                endif
                if KEY_VER == 1
                    xmath KEY_OFFSET "(PAZ_NUM + PAZ_DB) * KEY_SIZE"
                    callfunction SET_KEY 1
                else
                    callfunction SET_KEY2 1
                endif

                string NAME p= "%s/%s" PAZ_NAME NAME
                if ZIP == 0
                    log NAME OFFSET SIZE
                else
                    math SIZE += 0x1000 # for example 0x2156 instead of 0x214e
                    clog NAME OFFSET XSIZE SIZE # XSIZE because it's padded
                endif
            next i
        endif
    endif
next PAZ_NUM

startfunction SET_KEY
    goto KEY_OFFSET MEMORY_FILE2
    getdstring KEY KEY_SIZE MEMORY_FILE2
    for x = 0 < KEY_SIZE
        getvarchr TMP KEY x
        xmath TMP "(0 - (TMP + 0x100)) & 0xff"  # just NEG DL
        putvarchr KEY x TMP
    next x
    encryption blowfish KEY "" 0 KEY_SIZE
endfunction

startfunction SET_KEY2
    set KEY2_SUB string "63JwEajj"
    set KEY2_SUB string "wCCuLx5S"
    set KEY2_SUB string "J1WaoGBi"
    set KEY2_SUB string "F73xvHdo"

    string KEY2 p= "%s %08X %s" NAME SIZE KEY2_SUB
    encryption xor KEY2
    log MEMORY_FILE4 0 KEY2_SIZE MEMORY_FILE7
    encryption "" ""

    for x = 0 < 0x100
        putvarchr MEMORY_FILE5 x x
    next x
    math EAX = 0
    for x = 0 < 0x100
        getvarchr EDX MEMORY_FILE5 x
        xmath ECX "x % KEY2_SIZE"
        getvarchr EBX MEMORY_FILE4 ECX
        xmath EAX "(EAX + EBX + EDX) & 0xff"
        getvarchr EBX MEMORY_FILE5 EAX
        putvarchr MEMORY_FILE5 EAX EDX
        putvarchr MEMORY_FILE5 x EBX
    next x

    log MEMORY_FILE6 0 0
    putvarchr MEMORY_FILE6 0x10000 0
    math ECX = 0
    math ESI = 0
    for x = 0 < 0x10000
        math ECX + 1
        math ECX & 0xff
        getvarchr EDX MEMORY_FILE5 ECX
        math ESI + EDX
        math ESI & 0xff
        getvarchr EBX MEMORY_FILE5 ESI
        putvarchr MEMORY_FILE5 ECX EBX
        putvarchr MEMORY_FILE5 ESI EDX
        math EBX + EDX
        math EBX & 0xff
        getvarchr EDX MEMORY_FILE5 EBX
        putvarchr MEMORY_FILE6 x EDX
    next x

    getdstring KEY2 0x10000 MEMORY_FILE6
    encryption xor KEY2 "" 0 0x10000
endfunction
