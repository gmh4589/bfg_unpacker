# Throne of Darkness (ClickLibrary)
# script for QuickBMS http://quickbms.aluigi.org

# LZO 65D8A0, it seems modified
set MEMORY_FILE2 binary "\x8b\x44\x24\x08\x53\x8b\x5c\x24\x14\x55\x56\x8b\x74\x24\x10\xc7\x03\x00\x00\x00\x00\x57\x8a\x0e\x8d\x2c\x06\x8b\x44\x24\x1c\x80\xf9\x11\x76\x1e\x81\xe1\xff\x00\x00\x00\x83\xe9\x11\x46\x83\xf9\x04\x0f\x82\xb7\x00\x00\x00\x8a\x16\x88\x10\x40\x46\x49\x75\xf7\xeb\x6a\x33\xc9\x8a\x0e\x46\x83\xf9\x10\x0f\x83\xac\x00\x00\x00\x85\xc9\x75\x1c\x80\x3e\x00\x75\x0e\x8a\x56\x01\x81\xc1\xff\x00\x00\x00\x46\x84\xd2\x74\xf2\x33\xd2\x8a\x16\x46\x8d\x4c\x11\x0f\x8b\x16\x83\xc6\x04\x89\x10\x83\xc0\x04\x49\x74\x2f\x83\xf9\x04\x72\x21\x8b\x16\x83\xe9\x04\x89\x10\x83\xc0\x04\x83\xc6\x04\x83\xf9\x04\x73\xee\x85\xc9\x76\x14\x8a\x16\x88\x10\x40\x46\x49\x75\xf7\xeb\x09\x8a\x16\x88\x10\x40\x46\x49\x75\xf7\x33\xc9\x8a\x0e\x46\x83\xf9\x10\x73\x46\xc1\xe9\x02\x8b\xd0\x2b\xd1\x33\xc9\x8a\x0e\xc1\xe1\x02\x2b\xd1\x8a\x8a\xff\xf7\xff\xff\x81\xea\x01\x08\x00\x00\x46\x88\x08\x40\x42\x8a\x0a\x88\x08\x8a\x52\x01\x40\x88\x10\x40\x8a\x4e\xfe\x83\xe1\x03\x0f\x84\x54\xff\xff\xff\x8a\x16\x88\x10\x40\x46\x49\x75\xf7\x33\xc9\x8a\x0e\x46\x83\xf9\x40\x72\x33\x8b\xd1\x8b\xf8\xc1\xea\x02\x83\xe2\x07\x2b\xfa\x33\xd2\x8a\x16\xc1\xe2\x03\x2b\xfa\x4f\x46\xc1\xe9\x05\x49\x8a\x17\x88\x10\x8a\x57\x01\x40\x47\x88\x10\x40\x47\x8a\x17\x88\x10\x40\x47\x49\x75\xf7\xeb\xae\x83\xf9\x20\x72\x33\x83\xe1\x1f\x75\x1c\x80\x3e\x00\x75\x0e\x8a\x56\x01\x81\xc1\xff\x00\x00\x00\x46\x84\xd2\x74\xf2\x33\xd2\x8a\x16\x46\x8d\x4c\x11\x1f\x33\xd2\x8b\xf8\x66\x8b\x16\xc1\xea\x02\x2b\xfa\x4f\x83\xc6\x02\xeb\x4d\x83\xf9\x10\x0f\x82\x8f\x00\x00\x00\x8b\xd1\x8b\xf8\x83\xe2\x08\xc1\xe2\x0b\x2b\xfa\x83\xe1\x07\x75\x1c\x80\x3e\x00\x75\x0e\x8a\x56\x01\x81\xc1\xff\x00\x00\x00\x46\x84\xd2\x74\xf2\x33\xd2\x8a\x16\x46\x8d\x4c\x11\x07\x33\xd2\x66\x8b\x16\x83\xc6\x02\xc1\xea\x02\x2b\xfa\x3b\xf8\x74\x68\x81\xef\x00\x40\x00\x00\x83\xf9\x06\x0f\x82\x5a\xff\xff\xff\x8b\xd0\x2b\xd7\x83\xfa\x04\x0f\x8c\x4d\xff\xff\xff\x8b\x17\x83\xc7\x04\x89\x10\x83\xc0\x04\x83\xe9\x02\x8b\x17\x83\xe9\x04\x89\x10\x83\xc0\x04\x83\xc7\x04\x83\xf9\x04\x73\xee\x85\xc9\x0f\x86\xec\xfe\xff\xff\x8a\x17\x88\x10\x40\x47\x49\x75\xf7\xe9\xde\xfe\xff\xff\xc1\xe9\x02\x8b\xd0\x2b\xd1\x33\xc9\x8a\x0e\xc1\xe1\x02\x2b\xd1\x4a\x46\xe9\xbc\xfe\xff\xff\x8b\x4c\x24\x1c\x2b\xc1\x3b\xf5\x89\x03\x75\x07\x5f\x5e\x5d\x33\xc0\x5b\xc3\x1b\xc0\x5f\x24\xfc\x5e\x5d\x83\xc0\xfc\x5b\xc3"

goto -4
savepos LIMIT
savepos OFFSET
get ZSIZE long
math SIZE = -1
math OFFSET -= ZSIZE
callfunction UNPACK 1
get SIZE asize MEMORY_FILE
log MEMORY_FILE5 0 SIZE MEMORY_FILE

idstring MEMORY_FILE5 "\xce\xfa\xef\xbe"
set PATH string ""
set NAME string ""
callfunction EXTRACT

startfunction EXTRACT
    string PATH += NAME
    string PATH += /
    for FILES_FOLDERS = 0 < 2
        get ENTRIES long MEMORY_FILE5
        for i = 0 < ENTRIES
            get NAMESZ byte MEMORY_FILE5
            getdstring NAME NAMESZ MEMORY_FILE5
            if FILES_FOLDERS == 0
                get SIZE long MEMORY_FILE5
                get OFFSET long MEMORY_FILE5
                get ZMETHOD long MEMORY_FILE5
                get ZERO long MEMORY_FILE5
                if ZMETHOD == 0
                    math ZSIZE = -1
                    callfunction UNPACK 1
                else
                    log MEMORY_FILE OFFSET SIZE
                endif
                set FNAME string PATH
                string FNAME += NAME
                log FNAME 0 SIZE MEMORY_FILE
            else
                callfunction EXTRACT
            endif
        next i
    next FILES_FOLDERS
endfunction

startfunction UNPACK
    if SIZE != -1
        putvarchr MEMORY_FILE SIZE 0
    endif
    log MEMORY_FILE 0 0
    if ZSIZE == -1
        get LIMIT asize
        math LIMIT -= 4
    else
        math LIMIT = OFFSET
        math LIMIT += ZSIZE
    endif
    math LIMIT -= 5

    for OFFSET = OFFSET < LIMIT
        goto OFFSET
        get TYPE byte
        if TYPE & 0x80
            get CHUNK_SIZE byte
            get CHUNK_ZSIZE byte
        else
            get CHUNK_SIZE short
            get CHUNK_ZSIZE short
        endif
        math TYPE &= 0x7f
        savepos OFFSET
        math CHUNK_ZSIZE += 1
        math CHUNK_SIZE += 1

        if TYPE == 1
            comtype copy
            append
            clog MEMORY_FILE OFFSET CHUNK_ZSIZE CHUNK_SIZE
            append

        elif TYPE == 4
            putvarchr MEMORY_FILE4 CHUNK_SIZE 0
            log MEMORY_FILE3 OFFSET CHUNK_ZSIZE
            calldll MEMORY_FILE2 0 cdecl RET MEMORY_FILE3 CHUNK_ZSIZE MEMORY_FILE4 &CHUNK_SIZE 0
            append
            log MEMORY_FILE 0 CHUNK_SIZE MEMORY_FILE4
            append

        else
            print "Error: unknown compression %TYPE% at offset %OFFSET|x%"
            cleanexit
        endif
        math OFFSET += CHUNK_ZSIZE

        if SIZE != -1
            get TMP_SIZE asize MEMORY_FILE
            if TMP_SIZE >= SIZE
                math OFFSET = LIMIT
            endif
        endif
    next
endfunction
