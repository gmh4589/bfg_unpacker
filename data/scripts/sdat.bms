# extracts the contents of Nintendo DS *.sdat sound containers
#(c) 2012-03-18 by AlphaTwentyThree of XeNTaX

idstring "SDAT"
get UNK short
get UNK short
get FILESIZE long
get INFO_AREA short # header length
get UNK short

# write sections to memory files
get pSYMBOL long # SYMB offset
get sSYMBOL long # SYMB size
   putVarChr MEMORY_FILE sSYMBOL 0
   log MEMORY_FILE 0 0
   log MEMORY_FILE pSYMBOL sSYMBOL
get pINFO long   # INFO offset
get sINFO long   # INFO size
   putVarChr MEMORY_FILE2 sINFO 0
   log MEMORY_FILE2 0 0
   log MEMORY_FILE2 pINFO sINFO
get pFAT long    # FAT offset
get sFAT long    # FAT size
   putVarChr MEMORY_FILE3 sFAT 0
   log MEMORY_FILE3 0 0
   log MEMORY_FILE3 pFAT sFAT
get pFILE long   # FILE offset
get sFILE long   # FILE size
   putVarChr MEMORY_FILE4 sFILE 0
   log MEMORY_FILE4 0 0
   log MEMORY_FILE4 pFILE sFILE

PutArray 0 0 "/Seq/"
PutArray 0 1 "/SeqArc/"
PutArray 0 2 "/Bank/"
PutArray 0 3 "/WaveArc/"
PutArray 0 4 "/Player/"
PutArray 0 5 "/Group/"
PutArray 0 6 "/PlayerSTRM/"
PutArray 0 7 "/STRM/"

PutArray 1 0 ".sseq"
PutArray 1 1 ".ssar"
PutArray 1 2 ".sbnk"
PutArray 1 3 ".swar"
PutArray 1 4 ".ply"
PutArray 1 5 "" # different extensions
PutArray 1 6 ".strm"
PutArray 1 7 ".strm"

set FIRSTNAME 0
for i = 0 <= 7
   set INIPOS i # initial position without area bias
   math INIPOS *= 4
   math INIPOS += 8 # skip IDENT and AREA_SIZE
   
   # name information
   goto INIPOS MEMORY_FILE
   get NPOS long MEMORY_FILE
   goto NPOS MEMORY_FILE
   get FILES long MEMORY_FILE
   savepos NAME_INFO MEMORY_FILE
   
   # position of size/offset information in FAT area
   goto INIPOS MEMORY_FILE2
   get IPOS long MEMORY_FILE2
   goto IPOS MEMORY_FILE2
   get FILES2 long MEMORY_FILE2 # not needed (duplicate value)
   savepos INFO_POS MEMORY_FILE2
   
   getArray FOLDER 0 i
   getArray EXT 1 i
   get FPATH basename
   string FPATH += FOLDER
   
   # MEMORY_FILE    :    SYMB (names)
   # MEMORY_FILE2    :    INFO (pointer to offset/size)
   # MEMORY_FILE3    :    FAT (offset/sizes)
   # MEMORY_FILE4    :    FILE (binary data)
   for j = 1 <= FILES
      # get name
      goto NAME_INFO MEMORY_FILE
      get NAMEPOS long MEMORY_FILE
      savepos NAME_INFO MEMORY_FILE
      if FIRSTNAME == 0
         set FIRSTNAME NAMEPOS
      endif
      if NAMEPOS < FIRSTNAME
         do
            get NAMEPOS long MEMORY_FILE
            savepos NAME_INFO
         while NAMEPOS < FIRSTNAME
      endif
      goto NAMEPOS MEMORY_FILE
      get NAME string MEMORY_FILE
      set FNAME FPATH
      string FNAME += NAME
      string FNAME += EXT
      
      # get file ID
      goto INFO_POS MEMORY_FILE2
      get ID_INFO long MEMORY_FILE2
      savepos INFO_POS MEMORY_FILE2
      goto ID_INFO MEMORY_FILE2
      if i == 4 # do nothing (?)
      elif i == 6 # do nothing (?)
      else
         get FILE_ID short MEMORY_FILE2
         # get offset/size
         set OFFPOS FILE_ID
         math OFFPOS *= 0x10
         math OFFPOS += 0xc # skip header
         goto OFFPOS MEMORY_FILE3
         get OFFSET long MEMORY_FILE3
         math OFFSET -= pFILE # offset it total offset in sdat
         get SIZE long MEMORY_FILE3
         if i == 5
            callfunction getEXT 1
         endif
         log FNAME OFFSET SIZE MEMORY_FILE4
      endif
   next j
next i

startfunction getEXT
   goto OFFSET MEMORY_FILE4
   getDstring IDENT 4 MEMORY_FILE4
   if IDENT == "SWAR"
      string FNAME += ".swar"
   elif IDENT == "SBNK"
      string FNAME += ".sbnk"
   elif IDENT == "SSAR"
      string FNAME += ".ssar"
   elif IDENT == "STRM"
      string FNAME += ".strm"
   endif
endfunctioni