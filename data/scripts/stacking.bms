# Stacking and Double Fine Productions games (script 0.2.4a)
#   this script is experimental
# script for QuickBMS http://quickbms.aluigi.org

open FDDE "~h" 0
open FDDE "~p" 1

endian big
idstring "dfpf"
get VER byte
get FLAGS threebyte
get DUMMY long
get ALIGN long
get DUMMY long
get NAMES_OFF long
get DUMMY long
get NAMES_SIZE long
get FILES long

math INFO_SIZE = FILES
math INFO_SIZE << 4
math INFO_OFF = NAMES_OFF
math INFO_OFF - INFO_SIZE
goto INFO_OFF

math NAMES_LIMIT = NAMES_OFF
math NAMES_LIMIT + NAMES_SIZE

math LAST_OFF = 0
for i = 0 < FILES
    get SIZE threebyte
    get FLAGS short
    get ZSIZE threebyte
    get OFFSET threebyte
    get VALUEX byte
    get NAMEX threebyte
    get ZIP byte

    savepos INFO_OFF
    if VER < 5
        math NAMEX >> 3
        math NAMEX + NAMES_OFF
        goto NAMEX
        get NAME string
    else
        math ZSIZE = VALUEX
        math ZSIZE & 7
        math ZSIZE << 24
        math ZSIZE | NAMEX
        if NAMES_OFF >= NAMES_LIMIT
            set NAME string ""
        else
            goto NAMES_OFF
            get NAME string
            savepos NAMES_OFF
        endif
    endif
    goto INFO_OFF

    #if ZIP & 2
    #    comtype XMemDecompress # this is wrong! I no longer have samples compressed with xmem at the moment...
    #else
        comtype zlib_noerror    # automatic SIZE because SIZE is not "certain" (Massive Chalice RgB_Stuff.~p 0x001e0800)
    #endif

    #math DO_ZIP = 1
    #if ZSIZE == SIZE
    #    math DO_ZIP = 0
    #endif

    if VER < 5
        math TMPA = 0xc00000
        math TMPX = 0x3fffff
        if SIZE & TMPA
            math SIZE & TMPX
        endif
        if ZSIZE & TMPA
            math ZSIZE & TMPX
        endif

        #math SIZE >> 1
        #math ZSIZE >> 1 # removed in 0.2.4

        # the following was used (correctly) with some files but it's wrong for all the others obviously...
        #math ZSIZE & 0x3ffff   # ???
    else
        if FLAGS & 0x8000
            math SIZE << 3
            math OFFSET << 2
        else
            math ZSIZE >> 4
        endif
    endif

    math OFFSET << 5

    if VER <= 5 # this <= 5 is correct!
        math VALUEX >> 3
        math OFFSET | VALUEX
    endif

    #print "DEBUG %OFFSET|X% %ZSIZE|X% %SIZE|X%"

    if NAME & "."
    else
        string NAME + "."
    endif

    if ZSIZE == 0
        log NAME OFFSET SIZE 1
    elif ZSIZE == SIZE
        log NAME OFFSET SIZE 1
    #elif DO_ZIP == 0
    #    log NAME OFFSET SIZE 1
    else
        clog NAME OFFSET ZSIZE SIZE 1
    endif
    math OFFSET + ZSIZE
    math OFFSET x 4
    math LAST_OFF = OFFSET
next i
