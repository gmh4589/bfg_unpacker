# Rage Software XFS
#   E-Racer / eRacer, Rage Rally, Lamborghini (cancelled xbox game), Eurofighter Typhoon
#   original information: https://wiki.xentax.com/index.php/Rage_Software_XFS

set MEMORY_FILE10 string "

/*
  RA decompression class version 1.0
  (c) 2006 Benjamin Haisch
  email: john_doe@techie.com
  You may use this code freely as long as you give me credit for it :)
*/

typedef int             bool;
typedef unsigned char   byte;
typedef unsigned short  uint16;
typedef unsigned int    uint32;

        int bitsLeft;
        byte bitBuffer;
        byte *inb, *outb, *inbuffer, *outbuffer;
        byte countTable1[512], countTable2[512];
        byte lengthTable1[512], lengthTable2[512];
        byte offsetTable1[32], offsetTable2[32];

void memset(byte *a, int b, int c) {
    while(c--) *a++ = b;
}

int getBit() {
    if (bitsLeft == 0) {
        bitBuffer = *inb++;
        bitsLeft = 8;
    }
    byte t = (bitBuffer & 0x80) >> 7;
    bitBuffer <<= 1;
    bitsLeft--;
    return t;
}

int loadBits(int count) {
    int value = 0;
    while (count > 0) {
        value = (value << 1) | getBit();
        count--;
    }
    return value;
}

void loadTable(byte *table1, byte *table2) {
    int count = (*inb++) * 2;
    int len1 = loadBits(3) + 1;
    int len2 = loadBits(3) + 1;
    while (count > 0) {
        byte value;
        if (getBit() == 0) {
            value = loadBits(len1);
        } else {
            value = loadBits(len2);
            *table2 = value;
            value = 0;
        }
        *table1++ = value;
        table2++;
        count--;
    }
}

int loadValue(byte *table1, byte *table2) {
    int index = 0;
    byte value = 0;
    do {
        index = (value << 1) | getBit();
        value = table1[index];
    } while (value != 0);
    return table2[index];
}

int loadCount() {
    return loadValue(countTable1, countTable2);
}

int loadLength() {
    int length = loadValue(lengthTable1, lengthTable2);
    if (length == 255) {
        byte len_hi = (getBit() << 1) | getBit();
        byte len_lo = *inb++;
        length = ((len_hi << 8) | len_lo) + 255;
    }
    return length;
}

int loadOffset() {
    int offset = loadValue(offsetTable1, offsetTable2);
    if (offset >= 2) {
        int bitcount = offset - 1;
        offset = 1;
        while (bitcount > 0) {
            offset = (offset << 1) | getBit();
            bitcount--;
        }
    }
    return ~offset;
}

void decompressData() {

    bitsLeft = 0;
    bitBuffer = 0;

    memset(countTable1, 0, 512);
    memset(countTable2, 0, 512);
    memset(lengthTable1, 0, 512);
    memset(lengthTable2, 0, 512);
    memset(offsetTable1, 0, 32);
    memset(offsetTable2, 0, 32);

    /* initialize bitbuffer */
    getBit();

    do {

        uint16 blocksize = *(uint16*)inb;
        inb += 2;

        /* load tables */
        loadTable(lengthTable1, lengthTable2);
        loadTable(countTable1, countTable2);
        loadTable(offsetTable1, offsetTable2);

        /* process the block */
        while (blocksize > 0) {
            int copyCount = loadCount();
            while(copyCount--) *outb++ = *inb++;
            int length = loadLength();
            if (length > 0) {
                int offset = loadOffset();
                /* don't use memcpy here because source and dest can overlap */
                while (length > 0) {
                    *outb = *(outb+offset);
                    outb++;
                    length--;
                }
            }
            blocksize--;
        }

    } while (getBit());

}

bool isRA(byte *inbuffer, uint32 insize) {
    return (insize > 12 && *(uint32*)inbuffer == 0x02004152);
}

uint32 decompress(byte *inbuffer, byte *outbuffer, int outsize) {
    if (!outbuffer || !inbuffer)
        return 0;

    //uint32 outsize = *(uint32*)&inbuffer[4];
    //*outbuffer = new byte[outsize];

    /* set input to the beginning of the compressed data */
    inb = inbuffer + 12;
    outb = outbuffer;
    decompressData();

    /* return the decompressed size */
    return outb - outbuffer;

}
"

comtype calldll "MEMORY_FILE10 decompress tcc RET #INPUT# #OUTPUT# #OUTPUT_SIZE#"

idstring "DID DAT\x1a"
get TABLE_CRC long  # 0xffff0040
get TABLES long     # 8 or 9

for i = 0 < TABLES
    get ID long
    get OFFSET long
    if ID != 0xffffffff
        putarray 0 ID OFFSET
    endif
next i

getarray DATA_OFF  0 3
getarray INFO_OFF0 0 0
getarray INFO_OFF1 0 1
getarray INFO_OFF2 0 2

goto INFO_OFF0
get SIZE long       # 0xc
get FILES long

goto INFO_OFF2
for i = 0 < FILES
    get NAME_CRC long
    get OFFSET long
    putarray 1 i NAME_CRC
    putarray 2 i OFFSET
next i
    putarray 2 i INFO_OFF0

# required because compressed files have no compressed size
sortarray 2 1

for i = 0 < FILES
    getarray NAME_CRC 1 i
    getarray OFFSET   2 i
    math i + 1
    getarray SIZE     2 i
    math SIZE - OFFSET

    string NAME p "%08x." NAME_CRC

    savepos TMP
    goto OFFSET
    get XSIZE long
    get ZIP long
    savepos OFFSET
    if ZIP == 0
        log NAME OFFSET XSIZE
    else
        clog NAME OFFSET SIZE XSIZE
    endif
    goto TMP
next
