# game: Deus Ex: Human Revolution
# platform: Xbox 360
# file type: *.mul
# program needed: xma_parse (http://www.hcs64.com/vgm_ripping.html)
# script type: extractor (script 1)

# (c) by AlphaTwentyThree of Zenhax
# script for QuickBMS http://quickbms.aluigi.org

endian big
get FREQ long
get UNK long
get UNK long
get LAYERS long
get FSIZE asize
putVarChr MEMORY_FILE FSIZE 0
log MEMORY_FILE 0 0
for l = 0 < LAYERS
   putVarChr MEMORY_FILE FSIZE 0
   log MEMORY_FILE 0 0
   putVarChr MEMORY_FILE2 FSIZE 0
   log MEMORY_FILE2 0 0
   putVarChr MEMORY_FILE3 FSIZE 0
   log MEMORY_FILE3 0 0
   set OFFSET 0x800
   set EXTRA 0x10
   do
      goto OFFSET
      getDstring DUMMY EXTRA
      set EXTRA 0
      get SIZE long
      if SIZE > FSIZE # use the second script for these
         cleanexit
      endif
      get LAYER long
      get UNK longlong
      savepos OFFSET
      if LAYER == l
         append
         log MEMORY_FILE OFFSET SIZE
         append
      endif
      if LAYER == LAYERS # for the start of each cycle
         set EXTRA 0x10
      endif
      math OFFSET += SIZE
   while OFFSET < FSIZE
   endian little
   get SIZE asize MEMORY_FILE
   if SIZE != 0
      callfunction parse 1
      callfunction getXMACH 1
      get NAME basename
      xmath k "l + 1"
      string NAME p= "%s_%d.xma" NAME k
      callfunction XMA 1
   endif
   endian big
next l

startfunction parse
   endian little # just to be sure ;)
   set FUNCCALL string "xma_parse.exe #INPUT# -r #OUTPUT#"
   comtype EXECUTE FUNCCALL
   log MEMORY_FILE2 0 0
   clog MEMORY_FILE2 0 SIZE SIZE MEMORY_FILE # from mem [to temp] to mem2 (mem stays)
   encryption "" ""
endfunction

startfunction getXMACH # inside MEMORY_FILE!
   goto 7 MEMORY_FILE2
   get IDENT byte MEMORY_FILE2
   if IDENT == 1
      set CH 2
   elif IDENT == 3
      set CH 1
   elif IDENT == 0 # e.g. from multichannel stream
      set CH 2
   else
      print "ERROR: Not able to auto-determine channel count! Aborting all operations."
      cleanexit
   endif
endfunction

startfunction XMA # variant of standard function (mem2 to mem3)
   get MSIZE asize MEMORY_FILE2
   set RIFFSIZE MSIZE
   math RIFFSIZE += 0x34
   set PRESIZE RIFFSIZE # pre-alloc
   math PRESIZE += 0x38
   putVarChr MEMORY_FILE3 PRESIZE 0
   log MEMORY_FILE3 0 0
   set MEMORY_FILE3 binary "\x52\x49\x46\x46\xb8\x59\xa7\x00\x57\x41\x56\x45\x66\x6d\x74\x20\x20\x00\x00\x00\x65\x01\x10\x00\xd6\x10\x00\x00\x01\x00\x00\x03\xe3\x9a\x00\x00\x80\xbb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02\x00\x64\x61\x74\x61\x00\x58\xa7\x00"
   putVarChr MEMORY_FILE3 0x04 RIFFSIZE long
   putVarChr MEMORY_FILE3 0x24 FREQ long
   putVarChr MEMORY_FILE3 0x31 CH byte
   putVarChr MEMORY_FILE3 0x38 MSIZE long
   append
   log MEMORY_FILE3 0 MSIZE MEMORY_FILE2
   append
   get M3_SIZE asize MEMORY_FILE3
   log NAME 0 M3_SIZE MEMORY_FILE3
endfunction